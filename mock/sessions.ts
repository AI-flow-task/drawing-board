export const defaultSessions = [
  {
    id: '8c828dab-535a-4376-b231-e9f37ccf4ce6',
    chat: {
      title: 'Next.js PWA配置与解决方案',
      systemRole: '',
      messages: [
        {
          role: 'user',
          content:
            '在 nextjs 支持 pwa ，让其可以在Chrome 上显示添加到应用程序。应该如何配置 manifest',
        },
        {
          role: 'assistant',
          content:
            '在 Next.js 中支持 PWA，需要进行以下步骤：\n\n1. 创建一个 manifest.json 文件，该文件需要包含应用程序的名称、图标、主题颜色等信息。例如：\n\n```\n{\n  "name": "My PWA",\n  "short_name": "MyPWA",\n  "icons": [\n    {\n      "src": "/icon-192x192.png",\n      "sizes": "192x192",\n      "type": "image/png"\n    },\n    {\n      "src": "/icon-512x512.png",\n      "sizes": "512x512",\n      "type": "image/png"\n    }\n  ],\n  "theme_color": "#ffffff",\n  "background_color": "#ffffff",\n  "display": "standalone"\n}\n```\n\n2. 在 Next.js 中的 public 目录下创建一个名为 icons 的文件夹，并将应用程序图标添加到该文件夹中。\n\n3. 在 Next.js 的 pages 目录下创建一个名为 _app.js 的文件，并在该文件中添加以下代码：\n\n```\nimport Head from \'next/head\';\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Head>\n        <link rel="manifest" href="/manifest.json" />\n      </Head>\n      <Component {...pageProps} />\n    </>\n  );\n}\n\nexport default MyApp;\n```\n\n此代码将在应用程序中添加 manifest.json 文件，并使其可用于 PWA。\n\n4. 最后，在 Chrome 浏览器中打开应用程序，并单击地址栏右侧的“+”按钮，即可将应用程序添加到主屏幕中。\n\n希望这些步骤能够帮助你成功配置 Next.js 应用程序的 PWA。',
        },
        {
          role: 'user',
          content: '我配置了manifest，但是mac的 chrome 浏览器上没有出现添加到本地的按钮',
        },
        {
          role: 'assistant',
          content:
            '如果你已经按照上面的步骤配置了 manifest.json 文件，并且在 _app.js 文件中添加了链接，但是在 Chrome 浏览器上仍然无法看到添加到本地的按钮，那么你可以尝试以下几个解决方案：\n\n1. 确认你的 Chrome 浏览器是否支持 PWA。在 Chrome 浏览器中输入 chrome://version/，查看 "Service Worker" 和 "Web App Manifest" 是否启用。如果没有启用，你需要在 Chrome 浏览器中启用这两个功能。\n\n2. 确认你的 manifest.json 文件是否符合规范。你可以使用 Lighthouse 工具来检查你的 manifest.json 文件是否符合规范。在 Chrome 浏览器中按下 F12，然后选择 Lighthouse 选项卡，运行 Lighthouse 工具，并选择 "PWA" 选项卡。如果你的 manifest.json 文件存在问题，Lighthouse 会给出相应的错误提示。\n\n3. 确认你的 manifest.json 文件是否正确地链接到了你的应用程序。在 Chrome 浏览器中按下 F12，然后选择 "Application" 选项卡，选择 "Manifest" 选项卡，确认你的 manifest.json 文件是否正确链接到了你的应用程序。如果你的 manifest.json 文件链接错误，你需要在 _app.js 文件中修复链接。\n\n希望这些解决方案能够帮助你解决问题。',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: '5c1177f5-1140-4250-8377-2781a10a4618',
    chat: {
      title: '重构 React 组件为 Hooks',
      systemRole: '你是一名前端专家，擅长讲 React Class组件重构为 React hooks 组件',
      messages: [
        {
          role: 'user',
          content:
            "```ts\nclass TagCloud extends Component<TagCloudProps, TagCloudState> {\n    state = {\n      dv: null,\n      height: 0,\n      width: 0,\n    };\n    isUnmount: boolean = false;\n    requestRef: number = 0;\n    root: HTMLDivElement | undefined = undefined;\n    imageMask: HTMLImageElement | undefined = undefined;\n    componentDidMount() {\n      requestAnimationFrame(() => {\n        this.initTagCloud();\n        this.renderChart(this.props);\n      });\n      window.addEventListener('resize', this.resize, {\n        passive: true,\n      });\n    }\n    componentDidUpdate(preProps?: TagCloudProps) {\n      const { data } = this.props;\n      if (preProps && JSON.stringify(preProps.data) !== JSON.stringify(data)) {\n        this.renderChart(this.props);\n      }\n    }\n    componentWillUnmount() {\n      this.isUnmount = true;\n      window.cancelAnimationFrame(this.requestRef);\n      window.removeEventListener('resize', this.resize);\n    }\n    resize = () => {\n      this.requestRef = requestAnimationFrame(() => {\n        this.renderChart(this.props);\n      });\n    };\n    saveRootRef = (node: HTMLDivElement) => {\n      this.root = node;\n    };\n    initTagCloud = () => {\n      function getTextAttrs(cfg: {\n        x?: any;\n        y?: any;\n        style?: any;\n        opacity?: any;\n        origin?: any;\n        color?: any;\n      }) {\n        return {\n          ...cfg.style,\n          fillOpacity: cfg.opacity,\n          fontSize: cfg.origin._origin.size,\n          rotate: cfg.origin._origin.rotate,\n          text: cfg.origin._origin.text,\n          textAlign: 'center',\n          fontFamily: cfg.origin._origin.font,\n          fill: cfg.color,\n          textBaseline: 'Alphabetic',\n        };\n      }\n      (Shape as any).registerShape('point', 'cloud', {\n        drawShape(\n          cfg: {\n            x: any;\n            y: any;\n          },\n          container: {\n            addShape: (\n              arg0: string,\n              arg1: {\n                attrs: any;\n              },\n            ) => void;\n          },\n        ) {\n          const attrs = getTextAttrs(cfg);\n          return container.addShape('text', {\n            attrs: {\n              ...attrs,\n              x: cfg.x,\n              y: cfg.y,\n            },\n          });\n        },\n      });\n    };\n    renderChart = Debounce((nextProps: TagCloudProps) => {\n      // const colors = ['#1890FF', '#41D9C7', '#2FC25B', '#FACC14', '#9AE65C'];\n      const { data, height } = nextProps || this.props;\n      if (data.length < 1 || !this.root) {\n        return;\n      }\n      const h = height;\n      const w = this.root.offsetWidth;\n      const onload = () => {\n        const dv = new DataSet.View().source(data);\n        const range = dv.range('value');\n        const [min, max] = range;\n        dv.transform({\n          type: 'tag-cloud',\n          fields: ['name', 'value'],\n          imageMask: this.imageMask,\n          font: 'Verdana',\n          size: [w, h],\n          // 宽高设置最好根据 imageMask 做调整\n          padding: 0,\n          timeInterval: 5000,\n          // max execute time\n          rotate() {\n            return 0;\n          },\n          fontSize(d: { value: number }) {\n            const size = ((d.value - min) / (max - min)) ** 2;\n            return size * (17.5 - 5) + 5;\n          },\n        });\n        if (this.isUnmount) {\n          return;\n        }\n        this.setState({\n          dv,\n          width: w,\n          height: h,\n        });\n      };\n      if (!this.imageMask) {\n        this.imageMask = new Image();\n        this.imageMask.crossOrigin = '';\n        this.imageMask.src = imgUrl;\n        this.imageMask.onload = onload;\n      } else {\n        onload();\n      }\n    }, 500);\n    render() {\n      const { className, height } = this.props;\n      const { dv, width, height: stateHeight } = this.state;\n      return (\n        <div\n          className={classNames(styles.tagCloud, className)}\n          style={{\n            width: '100%',\n            height,\n          }}\n          ref={this.saveRootRef}\n        >\n          {dv && (\n            <Chart\n              width={width}\n              height={stateHeight}\n              data={dv}\n              padding={0}\n              scale={{\n                x: {\n                  nice: false,\n                },\n                y: {\n                  nice: false,\n                },\n              }}\n            >\n              <Tooltip showTitle={false} />\n              <Coord reflect=\"y\" />\n              <Geom\n                type=\"point\"\n                position=\"x*y\"\n                color=\"text\"\n                shape=\"cloud\"\n                tooltip={[\n                  'text*value',\n                  function trans(text, value) {\n                    return {\n                      name: text,\n                      value,\n                    };\n                  },\n                ]}\n              />\n            </Chart>\n          )}\n        </div>\n      );\n    }\n  }\n```",
        },
        {
          role: 'assistant',
          content:
            "以下是将该组件重构为 React hooks 组件的代码：\n\n```javascript\nimport React, { useState, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { Chart, Geom, Tooltip, Coord, Shape } from 'bizcharts';\nimport Debounce from 'lodash/debounce';\nimport DataSet from '@antv/data-set';\nimport imgUrl from './mask.png';\nimport styles from './TagCloud.less';\n\ninterface TagCloudProps {\n  className?: string;\n  height: number;\n  data: { name: string; value: number }[];\n}\n\nconst TagCloud: React.FC<TagCloudProps> = ({ className, height, data }) => {\n  const [dv, setDv] = useState<any>(null);\n  const [chartWidth, setChartWidth] = useState<number>(0);\n  const [chartHeight, setChartHeight] = useState<number>(0);\n  const isUnmount = useRef<boolean>(false);\n  const requestRef = useRef<number>(0);\n  const rootRef = useRef<HTMLDivElement>(null);\n  const imageMaskRef = useRef<HTMLImageElement | null>(null);\n\n  const resize = () => {\n    requestRef.current = requestAnimationFrame(() => {\n      renderChart();\n    });\n  };\n\n  const initTagCloud = () => {\n    function getTextAttrs(cfg: {\n      x?: any;\n      y?: any;\n      style?: any;\n      opacity?: any;\n      origin?: any;\n      color?: any;\n    }) {\n      return {\n        ...cfg.style,\n        fillOpacity: cfg.opacity,\n        fontSize: cfg.origin._origin.size,\n        rotate: cfg.origin._origin.rotate,\n        text: cfg.origin._origin.text,\n        textAlign: 'center',\n        fontFamily: cfg.origin._origin.font,\n        fill: cfg.color,\n        textBaseline: 'Alphabetic',\n      };\n    }\n    (Shape as any).registerShape('point', 'cloud', {\n      drawShape(\n        cfg: {\n          x: any;\n          y: any;\n        },\n        container: {\n          addShape: (\n            arg0: string,\n            arg1: {\n              attrs: any;\n            },\n          ) => void;\n        },\n      ) {\n        const attrs = getTextAttrs(cfg);\n        return container.addShape('text', {\n          attrs: {\n            ...attrs,\n            x: cfg.x,\n            y: cfg.y,\n          },\n        });\n      },\n    });\n  };\n\n  const renderChart = Debounce(() => {\n    const root = rootRef.current;\n    const imageMask = imageMaskRef.current;\n\n    if (!root || !imageMask || data.length < 1) {\n      return;\n    }\n\n    const h = height;\n    const w = root.offsetWidth;\n\n    const onload = () => {\n      const dv = new DataSet.View().source(data);\n      const range = dv.range('value');\n      const [min, max] = range;\n      dv.transform({\n        type: 'tag-cloud',\n        fields: ['name', 'value'],\n        imageMask,\n        font: 'Verdana',\n        size: [w, h],\n        // 宽高设置最好根据 imageMask 做调整\n        padding: 0,\n        timeInterval: 5000,\n        // max execute time\n        rotate() {\n          return 0;\n        },\n        fontSize(d: { value: number }) {\n          const size = ((d.value - min) / (max - min)) ** 2;\n          return size * (17.5 - 5) + 5;\n        },\n      });\n\n      if (isUnmount.current) {\n        return;\n      }\n\n      setDv(dv);\n      setChartWidth(w);\n      setChartHeight(h);\n    };\n\n    if (!imageMaskRef.current) {\n      const img = new Image();\n      img.crossOrigin = '';\n      img.src = imgUrl;\n      img.onload = onload;\n      imageMaskRef.current = img;\n    } else {\n      onload();\n    }\n  }, 500);\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(() => {\n      initTagCloud();\n      renderChart();\n    });\n\n    return () => {\n      isUnmount.current = true;\n      window.cancelAnimationFrame(requestRef.current);\n      window.removeEventListener('resize', resize);\n    };\n  }, []);\n\n  useEffect(() => {\n    renderChart();\n  }, [data]);\n\n  return (\n    <div\n      className={classNames(styles.tagCloud, className)}\n      style={{\n        width: '100%',\n        height,\n      }}\n      ref={rootRef}\n    >\n      {dv && (\n        <Chart\n          width={chartWidth}\n          height={chartHeight}\n          data={dv}\n          padding={0}\n          scale={{\n            x: {\n              nice: false,\n            },\n            y: {\n              nice: false,\n            },\n          }}\n        >\n          <Tooltip showTitle={false} />\n          <Coord reflect=\"y\" />\n          <Geom\n            type=\"point\"\n            position=\"x*y\"\n            color=\"text\"\n            shape=\"cloud\"\n            tooltip={[\n              'text*value',\n              function trans(text, value) {\n                return {\n                  name: text,\n                  value,\n                };\n              },\n            ]}\n          />\n        </Chart>\n      )}\n    </div>\n  );\n};\n\nexport default TagCloud;\n```",
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: 'd8b00215-3ed6-4fcf-891b-800b033950d3',
    chat: {
      title: 'Redux 转 Zustand 实现。',
      systemRole:
        "你是一名前端专家，擅长 react 生态的开发，特别精通 zustand、dva 等多种状态管理工具。\n\n用户接下来会输入一段 dva 的状态管理代码，你需要将这些代码改写为 zustand 的代码。zustand 的代码示例如下：\n\n```ts\n\ninterface DSListState {\n  loading: boolean;\n  searchKeywords?: string;\n  dsList: Data[];\n}\ninterface DSListAction {\n  useFetchList: () => {\n    data: Data[];\n    loading: boolean;\n    mutate: any;\n  };\n  refetch: () => void;\n}\ntype DSListStore = DSListState & DSListAction;\n\nexport const useDSList = create<DSListStore>((set, get) => ({\n  loading: false,\n  searchKeywords: undefined,\n  dsList: [],\n  useFetchList: () => {\n    const { isValidating, mutate } = useSWR<HituDesignSystem[]>(\n      '/ds-list',\n      undefined,\n      {\n        onSuccess: async (data) => {\n          let dsmManagerRoles = [];\n          if (!isPublic) {\n            dsmManagerRoles = await request('/user-manager');\n          }\n\n          set({\n            dsList: data\n              .filter(\n                (item) => item.latestVersion || dsmManagerRoles.includes(item.id),\n              )\n\n            loading: false,\n          });\n        },\n        onError: () => {\n          set({ loading: false });\n        },\n        onLoadingSlow: () => {\n          set({ loading: true });\n        },\n      },\n    );\n\n    return { loading: isValidating || get().loading, mutate, data: get().dsList };\n  },\n  refetch: () => {\n    mutateSWR('/remote/ds-list');\n  },\n}));\n\n```",
      messages: [
        {
          role: 'user',
          content:
            "```js\n  export default {\n    namespace: 'activityPage',\n    state: {\n      basic: {},\n      schedule: {},\n      guide: [],\n      guest: [],\n      partner: [],\n      staticmap: {},\n      ticket: [],\n      othersActivity: []\n    },\n    effects: {\n      *queryActivityBasic({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasic, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivityBasicResearch({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasicResearch, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivitySchedule({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivitySchedule, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              schedule: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuest({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuest, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guest: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityPartner({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityPartner, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              partner: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuide({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuide, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guide: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityStaticMap({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityStaticMap, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              staticmap: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityTicketList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityTicketList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              ticket: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityRelatedActivityList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityRelatedActivityList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              othersActivity: data\n            }\n          });\n        }\n        return code;\n      }\n    },\n    reducers: {\n      updateState: (state, { payload }) => ({ ...state, ...payload })\n    }\n  };\n  ```",
        },
        {
          role: 'assistant',
          content:
            '以下是改写后的 zustand 代码：\n\n```ts\ninterface ActivityPageState {\n  basic: any;\n  schedule: any;\n  guide: any[];\n  guest: any[];\n  partner: any[];\n  staticmap: any;\n  ticket: any[];\n  othersActivity: any[];\n}\n\ninterface ActivityPageActions {\n  queryActivityBasic: (payload: any) => Promise<any>;\n  queryActivityBasicResearch: (payload: any) => Promise<any>;\n  queryActivitySchedule: (payload: any) => Promise<any>;\n  queryActivityGuest: (payload: any) => Promise<any>;\n  queryActivityPartner: (payload: any) => Promise<any>;\n  queryActivityGuide: (payload: any) => Promise<any>;\n  queryActivityStaticMap: (payload: any) => Promise<any>;\n  queryCommunityTicketList: (payload: any) => Promise<any>;\n  queryCommunityRelatedActivityList: (payload: any) => Promise<any>;\n}\n\ntype ActivityPageStore = ActivityPageState & ActivityPageActions;\n\nexport const useActivityPage = create<ActivityPageStore>((set, get) => ({\n  basic: {},\n  schedule: {},\n  guide: [],\n  guest: [],\n  partner: [],\n  staticmap: {},\n  ticket: [],\n  othersActivity: [],\n  queryActivityBasic: async (payload) => {\n    const res = await service.queryActivityBasic(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivityBasicResearch: async (payload) => {\n    const res = await service.queryActivityBasicResearch(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivitySchedule: async (payload) => {\n    const res = await service.queryActivitySchedule(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ schedule: data });\n    }\n    return code;\n  },\n  queryActivityGuest: async (payload) => {\n    const res = await service.queryActivityGuest(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guest: data });\n    }\n    return code;\n  },\n  queryActivityPartner: async (payload) => {\n    const res = await service.queryActivityPartner(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ partner: data });\n    }\n    return code;\n  },\n  queryActivityGuide: async (payload) => {\n    const res = await service.queryActivityGuide(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guide: data });\n    }\n    return code;\n  },\n  queryActivityStaticMap: async (payload) => {\n    const res = await service.queryActivityStaticMap(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ staticmap: data });\n    }\n    return code;\n  },\n  queryCommunityTicketList: async (payload) => {\n    const res = await service.queryCommunityTicketList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ ticket: data });\n    }\n    return code;\n  },\n  queryCommunityRelatedActivityList: async (payload) => {\n    const res = await service.queryCommunityRelatedActivityList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ othersActivity: data });\n    }\n    return code;\n  },\n}));\n```',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: 'b4def02f-b331-4a92-9db0-85bcdb17c564',
    chat: {
      title: 'MobX重构AppStore',
      systemRole:
        "你是一名前端专家，擅长 react 生态的开发，特别精通 zustand、dva 等多种状态管理工具。\n\n用户接下来会输入一段 dva 的状态管理代码，你需要将这些代码改写为 zustand 的代码。zustand 的代码示例如下：\n\n```ts\n\ninterface DSListState {\n  loading: boolean;\n  searchKeywords?: string;\n  dsList: Data[];\n}\ninterface DSListAction {\n  useFetchList: () => {\n    data: Data[];\n    loading: boolean;\n    mutate: any;\n  };\n  refetch: () => void;\n}\ntype DSListStore = DSListState & DSListAction;\n\nexport const useDSList = create<DSListStore>((set, get) => ({\n  loading: false,\n  searchKeywords: undefined,\n  dsList: [],\n  useFetchList: () => {\n    const { isValidating, mutate } = useSWR<HituDesignSystem[]>(\n      '/ds-list',\n      undefined,\n      {\n        onSuccess: async (data) => {\n          let dsmManagerRoles = [];\n          if (!isPublic) {\n            dsmManagerRoles = await request('/user-manager');\n          }\n\n          set({\n            dsList: data\n              .filter(\n                (item) => item.latestVersion || dsmManagerRoles.includes(item.id),\n              )\n\n            loading: false,\n          });\n        },\n        onError: () => {\n          set({ loading: false });\n        },\n        onLoadingSlow: () => {\n          set({ loading: true });\n        },\n      },\n    );\n\n    return { loading: isValidating || get().loading, mutate, data: get().dsList };\n  },\n  refetch: () => {\n    mutateSWR('/remote/ds-list');\n  },\n}));\n\n```",
      messages: [
        {
          role: 'user',
          content:
            "```js\n  export default {\n    namespace: 'activityPage',\n    state: {\n      basic: {},\n      schedule: {},\n      guide: [],\n      guest: [],\n      partner: [],\n      staticmap: {},\n      ticket: [],\n      othersActivity: []\n    },\n    effects: {\n      *queryActivityBasic({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasic, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivityBasicResearch({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasicResearch, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivitySchedule({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivitySchedule, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              schedule: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuest({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuest, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guest: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityPartner({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityPartner, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              partner: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuide({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuide, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guide: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityStaticMap({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityStaticMap, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              staticmap: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityTicketList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityTicketList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              ticket: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityRelatedActivityList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityRelatedActivityList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              othersActivity: data\n            }\n          });\n        }\n        return code;\n      }\n    },\n    reducers: {\n      updateState: (state, { payload }) => ({ ...state, ...payload })\n    }\n  };\n  ```",
        },
        {
          role: 'assistant',
          content:
            '以下是改写后的 zustand 代码：\n\n```ts\ninterface ActivityPageState {\n  basic: any;\n  schedule: any;\n  guide: any[];\n  guest: any[];\n  partner: any[];\n  staticmap: any;\n  ticket: any[];\n  othersActivity: any[];\n}\n\ninterface ActivityPageActions {\n  queryActivityBasic: (payload: any) => Promise<any>;\n  queryActivityBasicResearch: (payload: any) => Promise<any>;\n  queryActivitySchedule: (payload: any) => Promise<any>;\n  queryActivityGuest: (payload: any) => Promise<any>;\n  queryActivityPartner: (payload: any) => Promise<any>;\n  queryActivityGuide: (payload: any) => Promise<any>;\n  queryActivityStaticMap: (payload: any) => Promise<any>;\n  queryCommunityTicketList: (payload: any) => Promise<any>;\n  queryCommunityRelatedActivityList: (payload: any) => Promise<any>;\n}\n\ntype ActivityPageStore = ActivityPageState & ActivityPageActions;\n\nexport const useActivityPage = create<ActivityPageStore>((set, get) => ({\n  basic: {},\n  schedule: {},\n  guide: [],\n  guest: [],\n  partner: [],\n  staticmap: {},\n  ticket: [],\n  othersActivity: [],\n  queryActivityBasic: async (payload) => {\n    const res = await service.queryActivityBasic(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivityBasicResearch: async (payload) => {\n    const res = await service.queryActivityBasicResearch(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivitySchedule: async (payload) => {\n    const res = await service.queryActivitySchedule(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ schedule: data });\n    }\n    return code;\n  },\n  queryActivityGuest: async (payload) => {\n    const res = await service.queryActivityGuest(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guest: data });\n    }\n    return code;\n  },\n  queryActivityPartner: async (payload) => {\n    const res = await service.queryActivityPartner(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ partner: data });\n    }\n    return code;\n  },\n  queryActivityGuide: async (payload) => {\n    const res = await service.queryActivityGuide(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guide: data });\n    }\n    return code;\n  },\n  queryActivityStaticMap: async (payload) => {\n    const res = await service.queryActivityStaticMap(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ staticmap: data });\n    }\n    return code;\n  },\n  queryCommunityTicketList: async (payload) => {\n    const res = await service.queryCommunityTicketList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ ticket: data });\n    }\n    return code;\n  },\n  queryCommunityRelatedActivityList: async (payload) => {\n    const res = await service.queryCommunityRelatedActivityList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ othersActivity: data });\n    }\n    return code;\n  },\n}));\n```',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
];

export const veryLongSessions = [
  {
    id: '8c828dab-535a-4376-b231-e9f37ccf4ce6',
    chat: {
      title: 'Next.js PWA配置与解决方案',
      systemRole: '',
      messages: [
        {
          role: 'user',
          content:
            '在 nextjs 支持 pwa ，让其可以在Chrome 上显示添加到应用程序。应该如何配置 manifest',
        },
        {
          role: 'assistant',
          content:
            '在 Next.js 中支持 PWA，需要进行以下步骤：\n\n1. 创建一个 manifest.json 文件，该文件需要包含应用程序的名称、图标、主题颜色等信息。例如：\n\n```\n{\n  "name": "My PWA",\n  "short_name": "MyPWA",\n  "icons": [\n    {\n      "src": "/icon-192x192.png",\n      "sizes": "192x192",\n      "type": "image/png"\n    },\n    {\n      "src": "/icon-512x512.png",\n      "sizes": "512x512",\n      "type": "image/png"\n    }\n  ],\n  "theme_color": "#ffffff",\n  "background_color": "#ffffff",\n  "display": "standalone"\n}\n```\n\n2. 在 Next.js 中的 public 目录下创建一个名为 icons 的文件夹，并将应用程序图标添加到该文件夹中。\n\n3. 在 Next.js 的 pages 目录下创建一个名为 _app.js 的文件，并在该文件中添加以下代码：\n\n```\nimport Head from \'next/head\';\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Head>\n        <link rel="manifest" href="/manifest.json" />\n      </Head>\n      <Component {...pageProps} />\n    </>\n  );\n}\n\nexport default MyApp;\n```\n\n此代码将在应用程序中添加 manifest.json 文件，并使其可用于 PWA。\n\n4. 最后，在 Chrome 浏览器中打开应用程序，并单击地址栏右侧的“+”按钮，即可将应用程序添加到主屏幕中。\n\n希望这些步骤能够帮助你成功配置 Next.js 应用程序的 PWA。',
        },
        {
          role: 'user',
          content: '我配置了manifest，但是mac的 chrome 浏览器上没有出现添加到本地的按钮',
        },
        {
          role: 'assistant',
          content:
            '如果你已经按照上面的步骤配置了 manifest.json 文件，并且在 _app.js 文件中添加了链接，但是在 Chrome 浏览器上仍然无法看到添加到本地的按钮，那么你可以尝试以下几个解决方案：\n\n1. 确认你的 Chrome 浏览器是否支持 PWA。在 Chrome 浏览器中输入 chrome://version/，查看 "Service Worker" 和 "Web App Manifest" 是否启用。如果没有启用，你需要在 Chrome 浏览器中启用这两个功能。\n\n2. 确认你的 manifest.json 文件是否符合规范。你可以使用 Lighthouse 工具来检查你的 manifest.json 文件是否符合规范。在 Chrome 浏览器中按下 F12，然后选择 Lighthouse 选项卡，运行 Lighthouse 工具，并选择 "PWA" 选项卡。如果你的 manifest.json 文件存在问题，Lighthouse 会给出相应的错误提示。\n\n3. 确认你的 manifest.json 文件是否正确地链接到了你的应用程序。在 Chrome 浏览器中按下 F12，然后选择 "Application" 选项卡，选择 "Manifest" 选项卡，确认你的 manifest.json 文件是否正确链接到了你的应用程序。如果你的 manifest.json 文件链接错误，你需要在 _app.js 文件中修复链接。\n\n希望这些解决方案能够帮助你解决问题。',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: '5c1177f5-1140-4250-8377-2781a10a4618',
    chat: {
      title: '重构 React 组件为 Hooks',
      systemRole: '你是一名前端专家，擅长讲 React Class组件重构为 React hooks 组件',
      messages: [
        {
          role: 'user',
          content:
            "```ts\nclass TagCloud extends Component<TagCloudProps, TagCloudState> {\n    state = {\n      dv: null,\n      height: 0,\n      width: 0,\n    };\n    isUnmount: boolean = false;\n    requestRef: number = 0;\n    root: HTMLDivElement | undefined = undefined;\n    imageMask: HTMLImageElement | undefined = undefined;\n    componentDidMount() {\n      requestAnimationFrame(() => {\n        this.initTagCloud();\n        this.renderChart(this.props);\n      });\n      window.addEventListener('resize', this.resize, {\n        passive: true,\n      });\n    }\n    componentDidUpdate(preProps?: TagCloudProps) {\n      const { data } = this.props;\n      if (preProps && JSON.stringify(preProps.data) !== JSON.stringify(data)) {\n        this.renderChart(this.props);\n      }\n    }\n    componentWillUnmount() {\n      this.isUnmount = true;\n      window.cancelAnimationFrame(this.requestRef);\n      window.removeEventListener('resize', this.resize);\n    }\n    resize = () => {\n      this.requestRef = requestAnimationFrame(() => {\n        this.renderChart(this.props);\n      });\n    };\n    saveRootRef = (node: HTMLDivElement) => {\n      this.root = node;\n    };\n    initTagCloud = () => {\n      function getTextAttrs(cfg: {\n        x?: any;\n        y?: any;\n        style?: any;\n        opacity?: any;\n        origin?: any;\n        color?: any;\n      }) {\n        return {\n          ...cfg.style,\n          fillOpacity: cfg.opacity,\n          fontSize: cfg.origin._origin.size,\n          rotate: cfg.origin._origin.rotate,\n          text: cfg.origin._origin.text,\n          textAlign: 'center',\n          fontFamily: cfg.origin._origin.font,\n          fill: cfg.color,\n          textBaseline: 'Alphabetic',\n        };\n      }\n      (Shape as any).registerShape('point', 'cloud', {\n        drawShape(\n          cfg: {\n            x: any;\n            y: any;\n          },\n          container: {\n            addShape: (\n              arg0: string,\n              arg1: {\n                attrs: any;\n              },\n            ) => void;\n          },\n        ) {\n          const attrs = getTextAttrs(cfg);\n          return container.addShape('text', {\n            attrs: {\n              ...attrs,\n              x: cfg.x,\n              y: cfg.y,\n            },\n          });\n        },\n      });\n    };\n    renderChart = Debounce((nextProps: TagCloudProps) => {\n      // const colors = ['#1890FF', '#41D9C7', '#2FC25B', '#FACC14', '#9AE65C'];\n      const { data, height } = nextProps || this.props;\n      if (data.length < 1 || !this.root) {\n        return;\n      }\n      const h = height;\n      const w = this.root.offsetWidth;\n      const onload = () => {\n        const dv = new DataSet.View().source(data);\n        const range = dv.range('value');\n        const [min, max] = range;\n        dv.transform({\n          type: 'tag-cloud',\n          fields: ['name', 'value'],\n          imageMask: this.imageMask,\n          font: 'Verdana',\n          size: [w, h],\n          // 宽高设置最好根据 imageMask 做调整\n          padding: 0,\n          timeInterval: 5000,\n          // max execute time\n          rotate() {\n            return 0;\n          },\n          fontSize(d: { value: number }) {\n            const size = ((d.value - min) / (max - min)) ** 2;\n            return size * (17.5 - 5) + 5;\n          },\n        });\n        if (this.isUnmount) {\n          return;\n        }\n        this.setState({\n          dv,\n          width: w,\n          height: h,\n        });\n      };\n      if (!this.imageMask) {\n        this.imageMask = new Image();\n        this.imageMask.crossOrigin = '';\n        this.imageMask.src = imgUrl;\n        this.imageMask.onload = onload;\n      } else {\n        onload();\n      }\n    }, 500);\n    render() {\n      const { className, height } = this.props;\n      const { dv, width, height: stateHeight } = this.state;\n      return (\n        <div\n          className={classNames(styles.tagCloud, className)}\n          style={{\n            width: '100%',\n            height,\n          }}\n          ref={this.saveRootRef}\n        >\n          {dv && (\n            <Chart\n              width={width}\n              height={stateHeight}\n              data={dv}\n              padding={0}\n              scale={{\n                x: {\n                  nice: false,\n                },\n                y: {\n                  nice: false,\n                },\n              }}\n            >\n              <Tooltip showTitle={false} />\n              <Coord reflect=\"y\" />\n              <Geom\n                type=\"point\"\n                position=\"x*y\"\n                color=\"text\"\n                shape=\"cloud\"\n                tooltip={[\n                  'text*value',\n                  function trans(text, value) {\n                    return {\n                      name: text,\n                      value,\n                    };\n                  },\n                ]}\n              />\n            </Chart>\n          )}\n        </div>\n      );\n    }\n  }\n```",
        },
        {
          role: 'assistant',
          content:
            "以下是将该组件重构为 React hooks 组件的代码：\n\n```javascript\nimport React, { useState, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { Chart, Geom, Tooltip, Coord, Shape } from 'bizcharts';\nimport Debounce from 'lodash/debounce';\nimport DataSet from '@antv/data-set';\nimport imgUrl from './mask.png';\nimport styles from './TagCloud.less';\n\ninterface TagCloudProps {\n  className?: string;\n  height: number;\n  data: { name: string; value: number }[];\n}\n\nconst TagCloud: React.FC<TagCloudProps> = ({ className, height, data }) => {\n  const [dv, setDv] = useState<any>(null);\n  const [chartWidth, setChartWidth] = useState<number>(0);\n  const [chartHeight, setChartHeight] = useState<number>(0);\n  const isUnmount = useRef<boolean>(false);\n  const requestRef = useRef<number>(0);\n  const rootRef = useRef<HTMLDivElement>(null);\n  const imageMaskRef = useRef<HTMLImageElement | null>(null);\n\n  const resize = () => {\n    requestRef.current = requestAnimationFrame(() => {\n      renderChart();\n    });\n  };\n\n  const initTagCloud = () => {\n    function getTextAttrs(cfg: {\n      x?: any;\n      y?: any;\n      style?: any;\n      opacity?: any;\n      origin?: any;\n      color?: any;\n    }) {\n      return {\n        ...cfg.style,\n        fillOpacity: cfg.opacity,\n        fontSize: cfg.origin._origin.size,\n        rotate: cfg.origin._origin.rotate,\n        text: cfg.origin._origin.text,\n        textAlign: 'center',\n        fontFamily: cfg.origin._origin.font,\n        fill: cfg.color,\n        textBaseline: 'Alphabetic',\n      };\n    }\n    (Shape as any).registerShape('point', 'cloud', {\n      drawShape(\n        cfg: {\n          x: any;\n          y: any;\n        },\n        container: {\n          addShape: (\n            arg0: string,\n            arg1: {\n              attrs: any;\n            },\n          ) => void;\n        },\n      ) {\n        const attrs = getTextAttrs(cfg);\n        return container.addShape('text', {\n          attrs: {\n            ...attrs,\n            x: cfg.x,\n            y: cfg.y,\n          },\n        });\n      },\n    });\n  };\n\n  const renderChart = Debounce(() => {\n    const root = rootRef.current;\n    const imageMask = imageMaskRef.current;\n\n    if (!root || !imageMask || data.length < 1) {\n      return;\n    }\n\n    const h = height;\n    const w = root.offsetWidth;\n\n    const onload = () => {\n      const dv = new DataSet.View().source(data);\n      const range = dv.range('value');\n      const [min, max] = range;\n      dv.transform({\n        type: 'tag-cloud',\n        fields: ['name', 'value'],\n        imageMask,\n        font: 'Verdana',\n        size: [w, h],\n        // 宽高设置最好根据 imageMask 做调整\n        padding: 0,\n        timeInterval: 5000,\n        // max execute time\n        rotate() {\n          return 0;\n        },\n        fontSize(d: { value: number }) {\n          const size = ((d.value - min) / (max - min)) ** 2;\n          return size * (17.5 - 5) + 5;\n        },\n      });\n\n      if (isUnmount.current) {\n        return;\n      }\n\n      setDv(dv);\n      setChartWidth(w);\n      setChartHeight(h);\n    };\n\n    if (!imageMaskRef.current) {\n      const img = new Image();\n      img.crossOrigin = '';\n      img.src = imgUrl;\n      img.onload = onload;\n      imageMaskRef.current = img;\n    } else {\n      onload();\n    }\n  }, 500);\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(() => {\n      initTagCloud();\n      renderChart();\n    });\n\n    return () => {\n      isUnmount.current = true;\n      window.cancelAnimationFrame(requestRef.current);\n      window.removeEventListener('resize', resize);\n    };\n  }, []);\n\n  useEffect(() => {\n    renderChart();\n  }, [data]);\n\n  return (\n    <div\n      className={classNames(styles.tagCloud, className)}\n      style={{\n        width: '100%',\n        height,\n      }}\n      ref={rootRef}\n    >\n      {dv && (\n        <Chart\n          width={chartWidth}\n          height={chartHeight}\n          data={dv}\n          padding={0}\n          scale={{\n            x: {\n              nice: false,\n            },\n            y: {\n              nice: false,\n            },\n          }}\n        >\n          <Tooltip showTitle={false} />\n          <Coord reflect=\"y\" />\n          <Geom\n            type=\"point\"\n            position=\"x*y\"\n            color=\"text\"\n            shape=\"cloud\"\n            tooltip={[\n              'text*value',\n              function trans(text, value) {\n                return {\n                  name: text,\n                  value,\n                };\n              },\n            ]}\n          />\n        </Chart>\n      )}\n    </div>\n  );\n};\n\nexport default TagCloud;\n```",
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: 'd8b00215-3ed6-4fcf-891b-800b033950d3',
    chat: {
      title: 'Redux 转 Zustand 实现。',
      systemRole:
        "你是一名前端专家，擅长 react 生态的开发，特别精通 zustand、dva 等多种状态管理工具。\n\n用户接下来会输入一段 dva 的状态管理代码，你需要将这些代码改写为 zustand 的代码。zustand 的代码示例如下：\n\n```ts\n\ninterface DSListState {\n  loading: boolean;\n  searchKeywords?: string;\n  dsList: Data[];\n}\ninterface DSListAction {\n  useFetchList: () => {\n    data: Data[];\n    loading: boolean;\n    mutate: any;\n  };\n  refetch: () => void;\n}\ntype DSListStore = DSListState & DSListAction;\n\nexport const useDSList = create<DSListStore>((set, get) => ({\n  loading: false,\n  searchKeywords: undefined,\n  dsList: [],\n  useFetchList: () => {\n    const { isValidating, mutate } = useSWR<HituDesignSystem[]>(\n      '/ds-list',\n      undefined,\n      {\n        onSuccess: async (data) => {\n          let dsmManagerRoles = [];\n          if (!isPublic) {\n            dsmManagerRoles = await request('/user-manager');\n          }\n\n          set({\n            dsList: data\n              .filter(\n                (item) => item.latestVersion || dsmManagerRoles.includes(item.id),\n              )\n\n            loading: false,\n          });\n        },\n        onError: () => {\n          set({ loading: false });\n        },\n        onLoadingSlow: () => {\n          set({ loading: true });\n        },\n      },\n    );\n\n    return { loading: isValidating || get().loading, mutate, data: get().dsList };\n  },\n  refetch: () => {\n    mutateSWR('/remote/ds-list');\n  },\n}));\n\n```",
      messages: [
        {
          role: 'user',
          content:
            "```js\n  export default {\n    namespace: 'activityPage',\n    state: {\n      basic: {},\n      schedule: {},\n      guide: [],\n      guest: [],\n      partner: [],\n      staticmap: {},\n      ticket: [],\n      othersActivity: []\n    },\n    effects: {\n      *queryActivityBasic({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasic, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivityBasicResearch({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasicResearch, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivitySchedule({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivitySchedule, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              schedule: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuest({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuest, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guest: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityPartner({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityPartner, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              partner: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuide({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuide, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guide: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityStaticMap({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityStaticMap, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              staticmap: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityTicketList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityTicketList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              ticket: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityRelatedActivityList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityRelatedActivityList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              othersActivity: data\n            }\n          });\n        }\n        return code;\n      }\n    },\n    reducers: {\n      updateState: (state, { payload }) => ({ ...state, ...payload })\n    }\n  };\n  ```",
        },
        {
          role: 'assistant',
          content:
            '以下是改写后的 zustand 代码：\n\n```ts\ninterface ActivityPageState {\n  basic: any;\n  schedule: any;\n  guide: any[];\n  guest: any[];\n  partner: any[];\n  staticmap: any;\n  ticket: any[];\n  othersActivity: any[];\n}\n\ninterface ActivityPageActions {\n  queryActivityBasic: (payload: any) => Promise<any>;\n  queryActivityBasicResearch: (payload: any) => Promise<any>;\n  queryActivitySchedule: (payload: any) => Promise<any>;\n  queryActivityGuest: (payload: any) => Promise<any>;\n  queryActivityPartner: (payload: any) => Promise<any>;\n  queryActivityGuide: (payload: any) => Promise<any>;\n  queryActivityStaticMap: (payload: any) => Promise<any>;\n  queryCommunityTicketList: (payload: any) => Promise<any>;\n  queryCommunityRelatedActivityList: (payload: any) => Promise<any>;\n}\n\ntype ActivityPageStore = ActivityPageState & ActivityPageActions;\n\nexport const useActivityPage = create<ActivityPageStore>((set, get) => ({\n  basic: {},\n  schedule: {},\n  guide: [],\n  guest: [],\n  partner: [],\n  staticmap: {},\n  ticket: [],\n  othersActivity: [],\n  queryActivityBasic: async (payload) => {\n    const res = await service.queryActivityBasic(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivityBasicResearch: async (payload) => {\n    const res = await service.queryActivityBasicResearch(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivitySchedule: async (payload) => {\n    const res = await service.queryActivitySchedule(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ schedule: data });\n    }\n    return code;\n  },\n  queryActivityGuest: async (payload) => {\n    const res = await service.queryActivityGuest(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guest: data });\n    }\n    return code;\n  },\n  queryActivityPartner: async (payload) => {\n    const res = await service.queryActivityPartner(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ partner: data });\n    }\n    return code;\n  },\n  queryActivityGuide: async (payload) => {\n    const res = await service.queryActivityGuide(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guide: data });\n    }\n    return code;\n  },\n  queryActivityStaticMap: async (payload) => {\n    const res = await service.queryActivityStaticMap(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ staticmap: data });\n    }\n    return code;\n  },\n  queryCommunityTicketList: async (payload) => {\n    const res = await service.queryCommunityTicketList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ ticket: data });\n    }\n    return code;\n  },\n  queryCommunityRelatedActivityList: async (payload) => {\n    const res = await service.queryCommunityRelatedActivityList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ othersActivity: data });\n    }\n    return code;\n  },\n}));\n```',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: 'b4def02f-b331-4a92-9db0-85bcdb17c564',
    chat: {
      title: 'MobX重构AppStore',
      systemRole:
        "你是一名前端专家，擅长 react 生态的开发，特别精通 zustand、dva 等多种状态管理工具。\n\n用户接下来会输入一段 dva 的状态管理代码，你需要将这些代码改写为 zustand 的代码。zustand 的代码示例如下：\n\n```ts\n\ninterface DSListState {\n  loading: boolean;\n  searchKeywords?: string;\n  dsList: Data[];\n}\ninterface DSListAction {\n  useFetchList: () => {\n    data: Data[];\n    loading: boolean;\n    mutate: any;\n  };\n  refetch: () => void;\n}\ntype DSListStore = DSListState & DSListAction;\n\nexport const useDSList = create<DSListStore>((set, get) => ({\n  loading: false,\n  searchKeywords: undefined,\n  dsList: [],\n  useFetchList: () => {\n    const { isValidating, mutate } = useSWR<HituDesignSystem[]>(\n      '/ds-list',\n      undefined,\n      {\n        onSuccess: async (data) => {\n          let dsmManagerRoles = [];\n          if (!isPublic) {\n            dsmManagerRoles = await request('/user-manager');\n          }\n\n          set({\n            dsList: data\n              .filter(\n                (item) => item.latestVersion || dsmManagerRoles.includes(item.id),\n              )\n\n            loading: false,\n          });\n        },\n        onError: () => {\n          set({ loading: false });\n        },\n        onLoadingSlow: () => {\n          set({ loading: true });\n        },\n      },\n    );\n\n    return { loading: isValidating || get().loading, mutate, data: get().dsList };\n  },\n  refetch: () => {\n    mutateSWR('/remote/ds-list');\n  },\n}));\n\n```",
      messages: [
        {
          role: 'user',
          content:
            "```js\n  export default {\n    namespace: 'activityPage',\n    state: {\n      basic: {},\n      schedule: {},\n      guide: [],\n      guest: [],\n      partner: [],\n      staticmap: {},\n      ticket: [],\n      othersActivity: []\n    },\n    effects: {\n      *queryActivityBasic({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasic, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivityBasicResearch({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasicResearch, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivitySchedule({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivitySchedule, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              schedule: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuest({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuest, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guest: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityPartner({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityPartner, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              partner: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuide({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuide, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guide: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityStaticMap({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityStaticMap, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              staticmap: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityTicketList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityTicketList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              ticket: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityRelatedActivityList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityRelatedActivityList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              othersActivity: data\n            }\n          });\n        }\n        return code;\n      }\n    },\n    reducers: {\n      updateState: (state, { payload }) => ({ ...state, ...payload })\n    }\n  };\n  ```",
        },
        {
          role: 'assistant',
          content:
            '以下是改写后的 zustand 代码：\n\n```ts\ninterface ActivityPageState {\n  basic: any;\n  schedule: any;\n  guide: any[];\n  guest: any[];\n  partner: any[];\n  staticmap: any;\n  ticket: any[];\n  othersActivity: any[];\n}\n\ninterface ActivityPageActions {\n  queryActivityBasic: (payload: any) => Promise<any>;\n  queryActivityBasicResearch: (payload: any) => Promise<any>;\n  queryActivitySchedule: (payload: any) => Promise<any>;\n  queryActivityGuest: (payload: any) => Promise<any>;\n  queryActivityPartner: (payload: any) => Promise<any>;\n  queryActivityGuide: (payload: any) => Promise<any>;\n  queryActivityStaticMap: (payload: any) => Promise<any>;\n  queryCommunityTicketList: (payload: any) => Promise<any>;\n  queryCommunityRelatedActivityList: (payload: any) => Promise<any>;\n}\n\ntype ActivityPageStore = ActivityPageState & ActivityPageActions;\n\nexport const useActivityPage = create<ActivityPageStore>((set, get) => ({\n  basic: {},\n  schedule: {},\n  guide: [],\n  guest: [],\n  partner: [],\n  staticmap: {},\n  ticket: [],\n  othersActivity: [],\n  queryActivityBasic: async (payload) => {\n    const res = await service.queryActivityBasic(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivityBasicResearch: async (payload) => {\n    const res = await service.queryActivityBasicResearch(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivitySchedule: async (payload) => {\n    const res = await service.queryActivitySchedule(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ schedule: data });\n    }\n    return code;\n  },\n  queryActivityGuest: async (payload) => {\n    const res = await service.queryActivityGuest(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guest: data });\n    }\n    return code;\n  },\n  queryActivityPartner: async (payload) => {\n    const res = await service.queryActivityPartner(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ partner: data });\n    }\n    return code;\n  },\n  queryActivityGuide: async (payload) => {\n    const res = await service.queryActivityGuide(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guide: data });\n    }\n    return code;\n  },\n  queryActivityStaticMap: async (payload) => {\n    const res = await service.queryActivityStaticMap(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ staticmap: data });\n    }\n    return code;\n  },\n  queryCommunityTicketList: async (payload) => {\n    const res = await service.queryCommunityTicketList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ ticket: data });\n    }\n    return code;\n  },\n  queryCommunityRelatedActivityList: async (payload) => {\n    const res = await service.queryCommunityRelatedActivityList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ othersActivity: data });\n    }\n    return code;\n  },\n}));\n```',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: '8c828dab-535a-4376-b231-e9f37ccf4ce6',
    chat: {
      title: 'Next.js PWA配置与解决方案',
      systemRole: '',
      messages: [
        {
          role: 'user',
          content:
            '在 nextjs 支持 pwa ，让其可以在Chrome 上显示添加到应用程序。应该如何配置 manifest',
        },
        {
          role: 'assistant',
          content:
            '在 Next.js 中支持 PWA，需要进行以下步骤：\n\n1. 创建一个 manifest.json 文件，该文件需要包含应用程序的名称、图标、主题颜色等信息。例如：\n\n```\n{\n  "name": "My PWA",\n  "short_name": "MyPWA",\n  "icons": [\n    {\n      "src": "/icon-192x192.png",\n      "sizes": "192x192",\n      "type": "image/png"\n    },\n    {\n      "src": "/icon-512x512.png",\n      "sizes": "512x512",\n      "type": "image/png"\n    }\n  ],\n  "theme_color": "#ffffff",\n  "background_color": "#ffffff",\n  "display": "standalone"\n}\n```\n\n2. 在 Next.js 中的 public 目录下创建一个名为 icons 的文件夹，并将应用程序图标添加到该文件夹中。\n\n3. 在 Next.js 的 pages 目录下创建一个名为 _app.js 的文件，并在该文件中添加以下代码：\n\n```\nimport Head from \'next/head\';\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Head>\n        <link rel="manifest" href="/manifest.json" />\n      </Head>\n      <Component {...pageProps} />\n    </>\n  );\n}\n\nexport default MyApp;\n```\n\n此代码将在应用程序中添加 manifest.json 文件，并使其可用于 PWA。\n\n4. 最后，在 Chrome 浏览器中打开应用程序，并单击地址栏右侧的“+”按钮，即可将应用程序添加到主屏幕中。\n\n希望这些步骤能够帮助你成功配置 Next.js 应用程序的 PWA。',
        },
        {
          role: 'user',
          content: '我配置了manifest，但是mac的 chrome 浏览器上没有出现添加到本地的按钮',
        },
        {
          role: 'assistant',
          content:
            '如果你已经按照上面的步骤配置了 manifest.json 文件，并且在 _app.js 文件中添加了链接，但是在 Chrome 浏览器上仍然无法看到添加到本地的按钮，那么你可以尝试以下几个解决方案：\n\n1. 确认你的 Chrome 浏览器是否支持 PWA。在 Chrome 浏览器中输入 chrome://version/，查看 "Service Worker" 和 "Web App Manifest" 是否启用。如果没有启用，你需要在 Chrome 浏览器中启用这两个功能。\n\n2. 确认你的 manifest.json 文件是否符合规范。你可以使用 Lighthouse 工具来检查你的 manifest.json 文件是否符合规范。在 Chrome 浏览器中按下 F12，然后选择 Lighthouse 选项卡，运行 Lighthouse 工具，并选择 "PWA" 选项卡。如果你的 manifest.json 文件存在问题，Lighthouse 会给出相应的错误提示。\n\n3. 确认你的 manifest.json 文件是否正确地链接到了你的应用程序。在 Chrome 浏览器中按下 F12，然后选择 "Application" 选项卡，选择 "Manifest" 选项卡，确认你的 manifest.json 文件是否正确链接到了你的应用程序。如果你的 manifest.json 文件链接错误，你需要在 _app.js 文件中修复链接。\n\n希望这些解决方案能够帮助你解决问题。',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: '5c1177f5-1140-4250-8377-2781a10a4618',
    chat: {
      title: '重构 React 组件为 Hooks',
      systemRole: '你是一名前端专家，擅长讲 React Class组件重构为 React hooks 组件',
      messages: [
        {
          role: 'user',
          content:
            "```ts\nclass TagCloud extends Component<TagCloudProps, TagCloudState> {\n    state = {\n      dv: null,\n      height: 0,\n      width: 0,\n    };\n    isUnmount: boolean = false;\n    requestRef: number = 0;\n    root: HTMLDivElement | undefined = undefined;\n    imageMask: HTMLImageElement | undefined = undefined;\n    componentDidMount() {\n      requestAnimationFrame(() => {\n        this.initTagCloud();\n        this.renderChart(this.props);\n      });\n      window.addEventListener('resize', this.resize, {\n        passive: true,\n      });\n    }\n    componentDidUpdate(preProps?: TagCloudProps) {\n      const { data } = this.props;\n      if (preProps && JSON.stringify(preProps.data) !== JSON.stringify(data)) {\n        this.renderChart(this.props);\n      }\n    }\n    componentWillUnmount() {\n      this.isUnmount = true;\n      window.cancelAnimationFrame(this.requestRef);\n      window.removeEventListener('resize', this.resize);\n    }\n    resize = () => {\n      this.requestRef = requestAnimationFrame(() => {\n        this.renderChart(this.props);\n      });\n    };\n    saveRootRef = (node: HTMLDivElement) => {\n      this.root = node;\n    };\n    initTagCloud = () => {\n      function getTextAttrs(cfg: {\n        x?: any;\n        y?: any;\n        style?: any;\n        opacity?: any;\n        origin?: any;\n        color?: any;\n      }) {\n        return {\n          ...cfg.style,\n          fillOpacity: cfg.opacity,\n          fontSize: cfg.origin._origin.size,\n          rotate: cfg.origin._origin.rotate,\n          text: cfg.origin._origin.text,\n          textAlign: 'center',\n          fontFamily: cfg.origin._origin.font,\n          fill: cfg.color,\n          textBaseline: 'Alphabetic',\n        };\n      }\n      (Shape as any).registerShape('point', 'cloud', {\n        drawShape(\n          cfg: {\n            x: any;\n            y: any;\n          },\n          container: {\n            addShape: (\n              arg0: string,\n              arg1: {\n                attrs: any;\n              },\n            ) => void;\n          },\n        ) {\n          const attrs = getTextAttrs(cfg);\n          return container.addShape('text', {\n            attrs: {\n              ...attrs,\n              x: cfg.x,\n              y: cfg.y,\n            },\n          });\n        },\n      });\n    };\n    renderChart = Debounce((nextProps: TagCloudProps) => {\n      // const colors = ['#1890FF', '#41D9C7', '#2FC25B', '#FACC14', '#9AE65C'];\n      const { data, height } = nextProps || this.props;\n      if (data.length < 1 || !this.root) {\n        return;\n      }\n      const h = height;\n      const w = this.root.offsetWidth;\n      const onload = () => {\n        const dv = new DataSet.View().source(data);\n        const range = dv.range('value');\n        const [min, max] = range;\n        dv.transform({\n          type: 'tag-cloud',\n          fields: ['name', 'value'],\n          imageMask: this.imageMask,\n          font: 'Verdana',\n          size: [w, h],\n          // 宽高设置最好根据 imageMask 做调整\n          padding: 0,\n          timeInterval: 5000,\n          // max execute time\n          rotate() {\n            return 0;\n          },\n          fontSize(d: { value: number }) {\n            const size = ((d.value - min) / (max - min)) ** 2;\n            return size * (17.5 - 5) + 5;\n          },\n        });\n        if (this.isUnmount) {\n          return;\n        }\n        this.setState({\n          dv,\n          width: w,\n          height: h,\n        });\n      };\n      if (!this.imageMask) {\n        this.imageMask = new Image();\n        this.imageMask.crossOrigin = '';\n        this.imageMask.src = imgUrl;\n        this.imageMask.onload = onload;\n      } else {\n        onload();\n      }\n    }, 500);\n    render() {\n      const { className, height } = this.props;\n      const { dv, width, height: stateHeight } = this.state;\n      return (\n        <div\n          className={classNames(styles.tagCloud, className)}\n          style={{\n            width: '100%',\n            height,\n          }}\n          ref={this.saveRootRef}\n        >\n          {dv && (\n            <Chart\n              width={width}\n              height={stateHeight}\n              data={dv}\n              padding={0}\n              scale={{\n                x: {\n                  nice: false,\n                },\n                y: {\n                  nice: false,\n                },\n              }}\n            >\n              <Tooltip showTitle={false} />\n              <Coord reflect=\"y\" />\n              <Geom\n                type=\"point\"\n                position=\"x*y\"\n                color=\"text\"\n                shape=\"cloud\"\n                tooltip={[\n                  'text*value',\n                  function trans(text, value) {\n                    return {\n                      name: text,\n                      value,\n                    };\n                  },\n                ]}\n              />\n            </Chart>\n          )}\n        </div>\n      );\n    }\n  }\n```",
        },
        {
          role: 'assistant',
          content:
            "以下是将该组件重构为 React hooks 组件的代码：\n\n```javascript\nimport React, { useState, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { Chart, Geom, Tooltip, Coord, Shape } from 'bizcharts';\nimport Debounce from 'lodash/debounce';\nimport DataSet from '@antv/data-set';\nimport imgUrl from './mask.png';\nimport styles from './TagCloud.less';\n\ninterface TagCloudProps {\n  className?: string;\n  height: number;\n  data: { name: string; value: number }[];\n}\n\nconst TagCloud: React.FC<TagCloudProps> = ({ className, height, data }) => {\n  const [dv, setDv] = useState<any>(null);\n  const [chartWidth, setChartWidth] = useState<number>(0);\n  const [chartHeight, setChartHeight] = useState<number>(0);\n  const isUnmount = useRef<boolean>(false);\n  const requestRef = useRef<number>(0);\n  const rootRef = useRef<HTMLDivElement>(null);\n  const imageMaskRef = useRef<HTMLImageElement | null>(null);\n\n  const resize = () => {\n    requestRef.current = requestAnimationFrame(() => {\n      renderChart();\n    });\n  };\n\n  const initTagCloud = () => {\n    function getTextAttrs(cfg: {\n      x?: any;\n      y?: any;\n      style?: any;\n      opacity?: any;\n      origin?: any;\n      color?: any;\n    }) {\n      return {\n        ...cfg.style,\n        fillOpacity: cfg.opacity,\n        fontSize: cfg.origin._origin.size,\n        rotate: cfg.origin._origin.rotate,\n        text: cfg.origin._origin.text,\n        textAlign: 'center',\n        fontFamily: cfg.origin._origin.font,\n        fill: cfg.color,\n        textBaseline: 'Alphabetic',\n      };\n    }\n    (Shape as any).registerShape('point', 'cloud', {\n      drawShape(\n        cfg: {\n          x: any;\n          y: any;\n        },\n        container: {\n          addShape: (\n            arg0: string,\n            arg1: {\n              attrs: any;\n            },\n          ) => void;\n        },\n      ) {\n        const attrs = getTextAttrs(cfg);\n        return container.addShape('text', {\n          attrs: {\n            ...attrs,\n            x: cfg.x,\n            y: cfg.y,\n          },\n        });\n      },\n    });\n  };\n\n  const renderChart = Debounce(() => {\n    const root = rootRef.current;\n    const imageMask = imageMaskRef.current;\n\n    if (!root || !imageMask || data.length < 1) {\n      return;\n    }\n\n    const h = height;\n    const w = root.offsetWidth;\n\n    const onload = () => {\n      const dv = new DataSet.View().source(data);\n      const range = dv.range('value');\n      const [min, max] = range;\n      dv.transform({\n        type: 'tag-cloud',\n        fields: ['name', 'value'],\n        imageMask,\n        font: 'Verdana',\n        size: [w, h],\n        // 宽高设置最好根据 imageMask 做调整\n        padding: 0,\n        timeInterval: 5000,\n        // max execute time\n        rotate() {\n          return 0;\n        },\n        fontSize(d: { value: number }) {\n          const size = ((d.value - min) / (max - min)) ** 2;\n          return size * (17.5 - 5) + 5;\n        },\n      });\n\n      if (isUnmount.current) {\n        return;\n      }\n\n      setDv(dv);\n      setChartWidth(w);\n      setChartHeight(h);\n    };\n\n    if (!imageMaskRef.current) {\n      const img = new Image();\n      img.crossOrigin = '';\n      img.src = imgUrl;\n      img.onload = onload;\n      imageMaskRef.current = img;\n    } else {\n      onload();\n    }\n  }, 500);\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(() => {\n      initTagCloud();\n      renderChart();\n    });\n\n    return () => {\n      isUnmount.current = true;\n      window.cancelAnimationFrame(requestRef.current);\n      window.removeEventListener('resize', resize);\n    };\n  }, []);\n\n  useEffect(() => {\n    renderChart();\n  }, [data]);\n\n  return (\n    <div\n      className={classNames(styles.tagCloud, className)}\n      style={{\n        width: '100%',\n        height,\n      }}\n      ref={rootRef}\n    >\n      {dv && (\n        <Chart\n          width={chartWidth}\n          height={chartHeight}\n          data={dv}\n          padding={0}\n          scale={{\n            x: {\n              nice: false,\n            },\n            y: {\n              nice: false,\n            },\n          }}\n        >\n          <Tooltip showTitle={false} />\n          <Coord reflect=\"y\" />\n          <Geom\n            type=\"point\"\n            position=\"x*y\"\n            color=\"text\"\n            shape=\"cloud\"\n            tooltip={[\n              'text*value',\n              function trans(text, value) {\n                return {\n                  name: text,\n                  value,\n                };\n              },\n            ]}\n          />\n        </Chart>\n      )}\n    </div>\n  );\n};\n\nexport default TagCloud;\n```",
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: 'd8b00215-3ed6-4fcf-891b-222',
    chat: {
      title: 'Redux 转 Zustand 实现。',
      systemRole:
        "你是一名前端专家，擅长 react 生态的开发，特别精通 zustand、dva 等多种状态管理工具。\n\n用户接下来会输入一段 dva 的状态管理代码，你需要将这些代码改写为 zustand 的代码。zustand 的代码示例如下：\n\n```ts\n\ninterface DSListState {\n  loading: boolean;\n  searchKeywords?: string;\n  dsList: Data[];\n}\ninterface DSListAction {\n  useFetchList: () => {\n    data: Data[];\n    loading: boolean;\n    mutate: any;\n  };\n  refetch: () => void;\n}\ntype DSListStore = DSListState & DSListAction;\n\nexport const useDSList = create<DSListStore>((set, get) => ({\n  loading: false,\n  searchKeywords: undefined,\n  dsList: [],\n  useFetchList: () => {\n    const { isValidating, mutate } = useSWR<HituDesignSystem[]>(\n      '/ds-list',\n      undefined,\n      {\n        onSuccess: async (data) => {\n          let dsmManagerRoles = [];\n          if (!isPublic) {\n            dsmManagerRoles = await request('/user-manager');\n          }\n\n          set({\n            dsList: data\n              .filter(\n                (item) => item.latestVersion || dsmManagerRoles.includes(item.id),\n              )\n\n            loading: false,\n          });\n        },\n        onError: () => {\n          set({ loading: false });\n        },\n        onLoadingSlow: () => {\n          set({ loading: true });\n        },\n      },\n    );\n\n    return { loading: isValidating || get().loading, mutate, data: get().dsList };\n  },\n  refetch: () => {\n    mutateSWR('/remote/ds-list');\n  },\n}));\n\n```",
      messages: [
        {
          role: 'user',
          content:
            "```js\n  export default {\n    namespace: 'activityPage',\n    state: {\n      basic: {},\n      schedule: {},\n      guide: [],\n      guest: [],\n      partner: [],\n      staticmap: {},\n      ticket: [],\n      othersActivity: []\n    },\n    effects: {\n      *queryActivityBasic({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasic, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivityBasicResearch({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasicResearch, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivitySchedule({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivitySchedule, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              schedule: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuest({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuest, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guest: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityPartner({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityPartner, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              partner: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuide({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuide, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guide: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityStaticMap({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityStaticMap, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              staticmap: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityTicketList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityTicketList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              ticket: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityRelatedActivityList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityRelatedActivityList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              othersActivity: data\n            }\n          });\n        }\n        return code;\n      }\n    },\n    reducers: {\n      updateState: (state, { payload }) => ({ ...state, ...payload })\n    }\n  };\n  ```",
        },
        {
          role: 'assistant',
          content:
            '以下是改写后的 zustand 代码：\n\n```ts\ninterface ActivityPageState {\n  basic: any;\n  schedule: any;\n  guide: any[];\n  guest: any[];\n  partner: any[];\n  staticmap: any;\n  ticket: any[];\n  othersActivity: any[];\n}\n\ninterface ActivityPageActions {\n  queryActivityBasic: (payload: any) => Promise<any>;\n  queryActivityBasicResearch: (payload: any) => Promise<any>;\n  queryActivitySchedule: (payload: any) => Promise<any>;\n  queryActivityGuest: (payload: any) => Promise<any>;\n  queryActivityPartner: (payload: any) => Promise<any>;\n  queryActivityGuide: (payload: any) => Promise<any>;\n  queryActivityStaticMap: (payload: any) => Promise<any>;\n  queryCommunityTicketList: (payload: any) => Promise<any>;\n  queryCommunityRelatedActivityList: (payload: any) => Promise<any>;\n}\n\ntype ActivityPageStore = ActivityPageState & ActivityPageActions;\n\nexport const useActivityPage = create<ActivityPageStore>((set, get) => ({\n  basic: {},\n  schedule: {},\n  guide: [],\n  guest: [],\n  partner: [],\n  staticmap: {},\n  ticket: [],\n  othersActivity: [],\n  queryActivityBasic: async (payload) => {\n    const res = await service.queryActivityBasic(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivityBasicResearch: async (payload) => {\n    const res = await service.queryActivityBasicResearch(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivitySchedule: async (payload) => {\n    const res = await service.queryActivitySchedule(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ schedule: data });\n    }\n    return code;\n  },\n  queryActivityGuest: async (payload) => {\n    const res = await service.queryActivityGuest(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guest: data });\n    }\n    return code;\n  },\n  queryActivityPartner: async (payload) => {\n    const res = await service.queryActivityPartner(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ partner: data });\n    }\n    return code;\n  },\n  queryActivityGuide: async (payload) => {\n    const res = await service.queryActivityGuide(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guide: data });\n    }\n    return code;\n  },\n  queryActivityStaticMap: async (payload) => {\n    const res = await service.queryActivityStaticMap(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ staticmap: data });\n    }\n    return code;\n  },\n  queryCommunityTicketList: async (payload) => {\n    const res = await service.queryCommunityTicketList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ ticket: data });\n    }\n    return code;\n  },\n  queryCommunityRelatedActivityList: async (payload) => {\n    const res = await service.queryCommunityRelatedActivityList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ othersActivity: data });\n    }\n    return code;\n  },\n}));\n```',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: 'b4def02f-b331-4a92-9db0-85bcdb17c564',
    chat: {
      title: 'MobX重构AppStore',
      systemRole:
        "你是一名前端专家，擅长 react 生态的开发，特别精通 zustand、dva 等多种状态管理工具。\n\n用户接下来会输入一段 dva 的状态管理代码，你需要将这些代码改写为 zustand 的代码。zustand 的代码示例如下：\n\n```ts\n\ninterface DSListState {\n  loading: boolean;\n  searchKeywords?: string;\n  dsList: Data[];\n}\ninterface DSListAction {\n  useFetchList: () => {\n    data: Data[];\n    loading: boolean;\n    mutate: any;\n  };\n  refetch: () => void;\n}\ntype DSListStore = DSListState & DSListAction;\n\nexport const useDSList = create<DSListStore>((set, get) => ({\n  loading: false,\n  searchKeywords: undefined,\n  dsList: [],\n  useFetchList: () => {\n    const { isValidating, mutate } = useSWR<HituDesignSystem[]>(\n      '/ds-list',\n      undefined,\n      {\n        onSuccess: async (data) => {\n          let dsmManagerRoles = [];\n          if (!isPublic) {\n            dsmManagerRoles = await request('/user-manager');\n          }\n\n          set({\n            dsList: data\n              .filter(\n                (item) => item.latestVersion || dsmManagerRoles.includes(item.id),\n              )\n\n            loading: false,\n          });\n        },\n        onError: () => {\n          set({ loading: false });\n        },\n        onLoadingSlow: () => {\n          set({ loading: true });\n        },\n      },\n    );\n\n    return { loading: isValidating || get().loading, mutate, data: get().dsList };\n  },\n  refetch: () => {\n    mutateSWR('/remote/ds-list');\n  },\n}));\n\n```",
      messages: [
        {
          role: 'user',
          content:
            "```js\n  export default {\n    namespace: 'activityPage',\n    state: {\n      basic: {},\n      schedule: {},\n      guide: [],\n      guest: [],\n      partner: [],\n      staticmap: {},\n      ticket: [],\n      othersActivity: []\n    },\n    effects: {\n      *queryActivityBasic({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasic, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivityBasicResearch({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasicResearch, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivitySchedule({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivitySchedule, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              schedule: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuest({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuest, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guest: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityPartner({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityPartner, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              partner: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuide({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuide, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guide: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityStaticMap({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityStaticMap, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              staticmap: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityTicketList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityTicketList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              ticket: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityRelatedActivityList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityRelatedActivityList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              othersActivity: data\n            }\n          });\n        }\n        return code;\n      }\n    },\n    reducers: {\n      updateState: (state, { payload }) => ({ ...state, ...payload })\n    }\n  };\n  ```",
        },
        {
          role: 'assistant',
          content:
            '以下是改写后的 zustand 代码：\n\n```ts\ninterface ActivityPageState {\n  basic: any;\n  schedule: any;\n  guide: any[];\n  guest: any[];\n  partner: any[];\n  staticmap: any;\n  ticket: any[];\n  othersActivity: any[];\n}\n\ninterface ActivityPageActions {\n  queryActivityBasic: (payload: any) => Promise<any>;\n  queryActivityBasicResearch: (payload: any) => Promise<any>;\n  queryActivitySchedule: (payload: any) => Promise<any>;\n  queryActivityGuest: (payload: any) => Promise<any>;\n  queryActivityPartner: (payload: any) => Promise<any>;\n  queryActivityGuide: (payload: any) => Promise<any>;\n  queryActivityStaticMap: (payload: any) => Promise<any>;\n  queryCommunityTicketList: (payload: any) => Promise<any>;\n  queryCommunityRelatedActivityList: (payload: any) => Promise<any>;\n}\n\ntype ActivityPageStore = ActivityPageState & ActivityPageActions;\n\nexport const useActivityPage = create<ActivityPageStore>((set, get) => ({\n  basic: {},\n  schedule: {},\n  guide: [],\n  guest: [],\n  partner: [],\n  staticmap: {},\n  ticket: [],\n  othersActivity: [],\n  queryActivityBasic: async (payload) => {\n    const res = await service.queryActivityBasic(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivityBasicResearch: async (payload) => {\n    const res = await service.queryActivityBasicResearch(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivitySchedule: async (payload) => {\n    const res = await service.queryActivitySchedule(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ schedule: data });\n    }\n    return code;\n  },\n  queryActivityGuest: async (payload) => {\n    const res = await service.queryActivityGuest(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guest: data });\n    }\n    return code;\n  },\n  queryActivityPartner: async (payload) => {\n    const res = await service.queryActivityPartner(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ partner: data });\n    }\n    return code;\n  },\n  queryActivityGuide: async (payload) => {\n    const res = await service.queryActivityGuide(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guide: data });\n    }\n    return code;\n  },\n  queryActivityStaticMap: async (payload) => {\n    const res = await service.queryActivityStaticMap(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ staticmap: data });\n    }\n    return code;\n  },\n  queryCommunityTicketList: async (payload) => {\n    const res = await service.queryCommunityTicketList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ ticket: data });\n    }\n    return code;\n  },\n  queryCommunityRelatedActivityList: async (payload) => {\n    const res = await service.queryCommunityRelatedActivityList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ othersActivity: data });\n    }\n    return code;\n  },\n}));\n```',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: '8c828dab-535a-4376-b231-e9f37ccf4ce6',
    chat: {
      title: 'Next.js PWA配置与解决方案',
      systemRole: '',
      messages: [
        {
          role: 'user',
          content:
            '在 nextjs 支持 pwa ，让其可以在Chrome 上显示添加到应用程序。应该如何配置 manifest',
        },
        {
          role: 'assistant',
          content:
            '在 Next.js 中支持 PWA，需要进行以下步骤：\n\n1. 创建一个 manifest.json 文件，该文件需要包含应用程序的名称、图标、主题颜色等信息。例如：\n\n```\n{\n  "name": "My PWA",\n  "short_name": "MyPWA",\n  "icons": [\n    {\n      "src": "/icon-192x192.png",\n      "sizes": "192x192",\n      "type": "image/png"\n    },\n    {\n      "src": "/icon-512x512.png",\n      "sizes": "512x512",\n      "type": "image/png"\n    }\n  ],\n  "theme_color": "#ffffff",\n  "background_color": "#ffffff",\n  "display": "standalone"\n}\n```\n\n2. 在 Next.js 中的 public 目录下创建一个名为 icons 的文件夹，并将应用程序图标添加到该文件夹中。\n\n3. 在 Next.js 的 pages 目录下创建一个名为 _app.js 的文件，并在该文件中添加以下代码：\n\n```\nimport Head from \'next/head\';\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Head>\n        <link rel="manifest" href="/manifest.json" />\n      </Head>\n      <Component {...pageProps} />\n    </>\n  );\n}\n\nexport default MyApp;\n```\n\n此代码将在应用程序中添加 manifest.json 文件，并使其可用于 PWA。\n\n4. 最后，在 Chrome 浏览器中打开应用程序，并单击地址栏右侧的“+”按钮，即可将应用程序添加到主屏幕中。\n\n希望这些步骤能够帮助你成功配置 Next.js 应用程序的 PWA。',
        },
        {
          role: 'user',
          content: '我配置了manifest，但是mac的 chrome 浏览器上没有出现添加到本地的按钮',
        },
        {
          role: 'assistant',
          content:
            '如果你已经按照上面的步骤配置了 manifest.json 文件，并且在 _app.js 文件中添加了链接，但是在 Chrome 浏览器上仍然无法看到添加到本地的按钮，那么你可以尝试以下几个解决方案：\n\n1. 确认你的 Chrome 浏览器是否支持 PWA。在 Chrome 浏览器中输入 chrome://version/，查看 "Service Worker" 和 "Web App Manifest" 是否启用。如果没有启用，你需要在 Chrome 浏览器中启用这两个功能。\n\n2. 确认你的 manifest.json 文件是否符合规范。你可以使用 Lighthouse 工具来检查你的 manifest.json 文件是否符合规范。在 Chrome 浏览器中按下 F12，然后选择 Lighthouse 选项卡，运行 Lighthouse 工具，并选择 "PWA" 选项卡。如果你的 manifest.json 文件存在问题，Lighthouse 会给出相应的错误提示。\n\n3. 确认你的 manifest.json 文件是否正确地链接到了你的应用程序。在 Chrome 浏览器中按下 F12，然后选择 "Application" 选项卡，选择 "Manifest" 选项卡，确认你的 manifest.json 文件是否正确链接到了你的应用程序。如果你的 manifest.json 文件链接错误，你需要在 _app.js 文件中修复链接。\n\n希望这些解决方案能够帮助你解决问题。',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: '5c1177f5-1140-4250-8377-2781a10a4618',
    chat: {
      title: '重构 React 组件为 Hooks',
      systemRole: '你是一名前端专家，擅长讲 React Class组件重构为 React hooks 组件',
      messages: [
        {
          role: 'user',
          content:
            "```ts\nclass TagCloud extends Component<TagCloudProps, TagCloudState> {\n    state = {\n      dv: null,\n      height: 0,\n      width: 0,\n    };\n    isUnmount: boolean = false;\n    requestRef: number = 0;\n    root: HTMLDivElement | undefined = undefined;\n    imageMask: HTMLImageElement | undefined = undefined;\n    componentDidMount() {\n      requestAnimationFrame(() => {\n        this.initTagCloud();\n        this.renderChart(this.props);\n      });\n      window.addEventListener('resize', this.resize, {\n        passive: true,\n      });\n    }\n    componentDidUpdate(preProps?: TagCloudProps) {\n      const { data } = this.props;\n      if (preProps && JSON.stringify(preProps.data) !== JSON.stringify(data)) {\n        this.renderChart(this.props);\n      }\n    }\n    componentWillUnmount() {\n      this.isUnmount = true;\n      window.cancelAnimationFrame(this.requestRef);\n      window.removeEventListener('resize', this.resize);\n    }\n    resize = () => {\n      this.requestRef = requestAnimationFrame(() => {\n        this.renderChart(this.props);\n      });\n    };\n    saveRootRef = (node: HTMLDivElement) => {\n      this.root = node;\n    };\n    initTagCloud = () => {\n      function getTextAttrs(cfg: {\n        x?: any;\n        y?: any;\n        style?: any;\n        opacity?: any;\n        origin?: any;\n        color?: any;\n      }) {\n        return {\n          ...cfg.style,\n          fillOpacity: cfg.opacity,\n          fontSize: cfg.origin._origin.size,\n          rotate: cfg.origin._origin.rotate,\n          text: cfg.origin._origin.text,\n          textAlign: 'center',\n          fontFamily: cfg.origin._origin.font,\n          fill: cfg.color,\n          textBaseline: 'Alphabetic',\n        };\n      }\n      (Shape as any).registerShape('point', 'cloud', {\n        drawShape(\n          cfg: {\n            x: any;\n            y: any;\n          },\n          container: {\n            addShape: (\n              arg0: string,\n              arg1: {\n                attrs: any;\n              },\n            ) => void;\n          },\n        ) {\n          const attrs = getTextAttrs(cfg);\n          return container.addShape('text', {\n            attrs: {\n              ...attrs,\n              x: cfg.x,\n              y: cfg.y,\n            },\n          });\n        },\n      });\n    };\n    renderChart = Debounce((nextProps: TagCloudProps) => {\n      // const colors = ['#1890FF', '#41D9C7', '#2FC25B', '#FACC14', '#9AE65C'];\n      const { data, height } = nextProps || this.props;\n      if (data.length < 1 || !this.root) {\n        return;\n      }\n      const h = height;\n      const w = this.root.offsetWidth;\n      const onload = () => {\n        const dv = new DataSet.View().source(data);\n        const range = dv.range('value');\n        const [min, max] = range;\n        dv.transform({\n          type: 'tag-cloud',\n          fields: ['name', 'value'],\n          imageMask: this.imageMask,\n          font: 'Verdana',\n          size: [w, h],\n          // 宽高设置最好根据 imageMask 做调整\n          padding: 0,\n          timeInterval: 5000,\n          // max execute time\n          rotate() {\n            return 0;\n          },\n          fontSize(d: { value: number }) {\n            const size = ((d.value - min) / (max - min)) ** 2;\n            return size * (17.5 - 5) + 5;\n          },\n        });\n        if (this.isUnmount) {\n          return;\n        }\n        this.setState({\n          dv,\n          width: w,\n          height: h,\n        });\n      };\n      if (!this.imageMask) {\n        this.imageMask = new Image();\n        this.imageMask.crossOrigin = '';\n        this.imageMask.src = imgUrl;\n        this.imageMask.onload = onload;\n      } else {\n        onload();\n      }\n    }, 500);\n    render() {\n      const { className, height } = this.props;\n      const { dv, width, height: stateHeight } = this.state;\n      return (\n        <div\n          className={classNames(styles.tagCloud, className)}\n          style={{\n            width: '100%',\n            height,\n          }}\n          ref={this.saveRootRef}\n        >\n          {dv && (\n            <Chart\n              width={width}\n              height={stateHeight}\n              data={dv}\n              padding={0}\n              scale={{\n                x: {\n                  nice: false,\n                },\n                y: {\n                  nice: false,\n                },\n              }}\n            >\n              <Tooltip showTitle={false} />\n              <Coord reflect=\"y\" />\n              <Geom\n                type=\"point\"\n                position=\"x*y\"\n                color=\"text\"\n                shape=\"cloud\"\n                tooltip={[\n                  'text*value',\n                  function trans(text, value) {\n                    return {\n                      name: text,\n                      value,\n                    };\n                  },\n                ]}\n              />\n            </Chart>\n          )}\n        </div>\n      );\n    }\n  }\n```",
        },
        {
          role: 'assistant',
          content:
            "以下是将该组件重构为 React hooks 组件的代码：\n\n```javascript\nimport React, { useState, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { Chart, Geom, Tooltip, Coord, Shape } from 'bizcharts';\nimport Debounce from 'lodash/debounce';\nimport DataSet from '@antv/data-set';\nimport imgUrl from './mask.png';\nimport styles from './TagCloud.less';\n\ninterface TagCloudProps {\n  className?: string;\n  height: number;\n  data: { name: string; value: number }[];\n}\n\nconst TagCloud: React.FC<TagCloudProps> = ({ className, height, data }) => {\n  const [dv, setDv] = useState<any>(null);\n  const [chartWidth, setChartWidth] = useState<number>(0);\n  const [chartHeight, setChartHeight] = useState<number>(0);\n  const isUnmount = useRef<boolean>(false);\n  const requestRef = useRef<number>(0);\n  const rootRef = useRef<HTMLDivElement>(null);\n  const imageMaskRef = useRef<HTMLImageElement | null>(null);\n\n  const resize = () => {\n    requestRef.current = requestAnimationFrame(() => {\n      renderChart();\n    });\n  };\n\n  const initTagCloud = () => {\n    function getTextAttrs(cfg: {\n      x?: any;\n      y?: any;\n      style?: any;\n      opacity?: any;\n      origin?: any;\n      color?: any;\n    }) {\n      return {\n        ...cfg.style,\n        fillOpacity: cfg.opacity,\n        fontSize: cfg.origin._origin.size,\n        rotate: cfg.origin._origin.rotate,\n        text: cfg.origin._origin.text,\n        textAlign: 'center',\n        fontFamily: cfg.origin._origin.font,\n        fill: cfg.color,\n        textBaseline: 'Alphabetic',\n      };\n    }\n    (Shape as any).registerShape('point', 'cloud', {\n      drawShape(\n        cfg: {\n          x: any;\n          y: any;\n        },\n        container: {\n          addShape: (\n            arg0: string,\n            arg1: {\n              attrs: any;\n            },\n          ) => void;\n        },\n      ) {\n        const attrs = getTextAttrs(cfg);\n        return container.addShape('text', {\n          attrs: {\n            ...attrs,\n            x: cfg.x,\n            y: cfg.y,\n          },\n        });\n      },\n    });\n  };\n\n  const renderChart = Debounce(() => {\n    const root = rootRef.current;\n    const imageMask = imageMaskRef.current;\n\n    if (!root || !imageMask || data.length < 1) {\n      return;\n    }\n\n    const h = height;\n    const w = root.offsetWidth;\n\n    const onload = () => {\n      const dv = new DataSet.View().source(data);\n      const range = dv.range('value');\n      const [min, max] = range;\n      dv.transform({\n        type: 'tag-cloud',\n        fields: ['name', 'value'],\n        imageMask,\n        font: 'Verdana',\n        size: [w, h],\n        // 宽高设置最好根据 imageMask 做调整\n        padding: 0,\n        timeInterval: 5000,\n        // max execute time\n        rotate() {\n          return 0;\n        },\n        fontSize(d: { value: number }) {\n          const size = ((d.value - min) / (max - min)) ** 2;\n          return size * (17.5 - 5) + 5;\n        },\n      });\n\n      if (isUnmount.current) {\n        return;\n      }\n\n      setDv(dv);\n      setChartWidth(w);\n      setChartHeight(h);\n    };\n\n    if (!imageMaskRef.current) {\n      const img = new Image();\n      img.crossOrigin = '';\n      img.src = imgUrl;\n      img.onload = onload;\n      imageMaskRef.current = img;\n    } else {\n      onload();\n    }\n  }, 500);\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(() => {\n      initTagCloud();\n      renderChart();\n    });\n\n    return () => {\n      isUnmount.current = true;\n      window.cancelAnimationFrame(requestRef.current);\n      window.removeEventListener('resize', resize);\n    };\n  }, []);\n\n  useEffect(() => {\n    renderChart();\n  }, [data]);\n\n  return (\n    <div\n      className={classNames(styles.tagCloud, className)}\n      style={{\n        width: '100%',\n        height,\n      }}\n      ref={rootRef}\n    >\n      {dv && (\n        <Chart\n          width={chartWidth}\n          height={chartHeight}\n          data={dv}\n          padding={0}\n          scale={{\n            x: {\n              nice: false,\n            },\n            y: {\n              nice: false,\n            },\n          }}\n        >\n          <Tooltip showTitle={false} />\n          <Coord reflect=\"y\" />\n          <Geom\n            type=\"point\"\n            position=\"x*y\"\n            color=\"text\"\n            shape=\"cloud\"\n            tooltip={[\n              'text*value',\n              function trans(text, value) {\n                return {\n                  name: text,\n                  value,\n                };\n              },\n            ]}\n          />\n        </Chart>\n      )}\n    </div>\n  );\n};\n\nexport default TagCloud;\n```",
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: 'd8b00215-3ed6-4fcf-891b-800b033950d3',
    chat: {
      title: 'Redux 转 Zustand 实现。',
      systemRole:
        "你是一名前端专家，擅长 react 生态的开发，特别精通 zustand、dva 等多种状态管理工具。\n\n用户接下来会输入一段 dva 的状态管理代码，你需要将这些代码改写为 zustand 的代码。zustand 的代码示例如下：\n\n```ts\n\ninterface DSListState {\n  loading: boolean;\n  searchKeywords?: string;\n  dsList: Data[];\n}\ninterface DSListAction {\n  useFetchList: () => {\n    data: Data[];\n    loading: boolean;\n    mutate: any;\n  };\n  refetch: () => void;\n}\ntype DSListStore = DSListState & DSListAction;\n\nexport const useDSList = create<DSListStore>((set, get) => ({\n  loading: false,\n  searchKeywords: undefined,\n  dsList: [],\n  useFetchList: () => {\n    const { isValidating, mutate } = useSWR<HituDesignSystem[]>(\n      '/ds-list',\n      undefined,\n      {\n        onSuccess: async (data) => {\n          let dsmManagerRoles = [];\n          if (!isPublic) {\n            dsmManagerRoles = await request('/user-manager');\n          }\n\n          set({\n            dsList: data\n              .filter(\n                (item) => item.latestVersion || dsmManagerRoles.includes(item.id),\n              )\n\n            loading: false,\n          });\n        },\n        onError: () => {\n          set({ loading: false });\n        },\n        onLoadingSlow: () => {\n          set({ loading: true });\n        },\n      },\n    );\n\n    return { loading: isValidating || get().loading, mutate, data: get().dsList };\n  },\n  refetch: () => {\n    mutateSWR('/remote/ds-list');\n  },\n}));\n\n```",
      messages: [
        {
          role: 'user',
          content:
            "```js\n  export default {\n    namespace: 'activityPage',\n    state: {\n      basic: {},\n      schedule: {},\n      guide: [],\n      guest: [],\n      partner: [],\n      staticmap: {},\n      ticket: [],\n      othersActivity: []\n    },\n    effects: {\n      *queryActivityBasic({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasic, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivityBasicResearch({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasicResearch, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivitySchedule({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivitySchedule, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              schedule: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuest({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuest, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guest: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityPartner({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityPartner, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              partner: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuide({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuide, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guide: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityStaticMap({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityStaticMap, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              staticmap: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityTicketList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityTicketList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              ticket: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityRelatedActivityList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityRelatedActivityList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              othersActivity: data\n            }\n          });\n        }\n        return code;\n      }\n    },\n    reducers: {\n      updateState: (state, { payload }) => ({ ...state, ...payload })\n    }\n  };\n  ```",
        },
        {
          role: 'assistant',
          content:
            '以下是改写后的 zustand 代码：\n\n```ts\ninterface ActivityPageState {\n  basic: any;\n  schedule: any;\n  guide: any[];\n  guest: any[];\n  partner: any[];\n  staticmap: any;\n  ticket: any[];\n  othersActivity: any[];\n}\n\ninterface ActivityPageActions {\n  queryActivityBasic: (payload: any) => Promise<any>;\n  queryActivityBasicResearch: (payload: any) => Promise<any>;\n  queryActivitySchedule: (payload: any) => Promise<any>;\n  queryActivityGuest: (payload: any) => Promise<any>;\n  queryActivityPartner: (payload: any) => Promise<any>;\n  queryActivityGuide: (payload: any) => Promise<any>;\n  queryActivityStaticMap: (payload: any) => Promise<any>;\n  queryCommunityTicketList: (payload: any) => Promise<any>;\n  queryCommunityRelatedActivityList: (payload: any) => Promise<any>;\n}\n\ntype ActivityPageStore = ActivityPageState & ActivityPageActions;\n\nexport const useActivityPage = create<ActivityPageStore>((set, get) => ({\n  basic: {},\n  schedule: {},\n  guide: [],\n  guest: [],\n  partner: [],\n  staticmap: {},\n  ticket: [],\n  othersActivity: [],\n  queryActivityBasic: async (payload) => {\n    const res = await service.queryActivityBasic(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivityBasicResearch: async (payload) => {\n    const res = await service.queryActivityBasicResearch(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivitySchedule: async (payload) => {\n    const res = await service.queryActivitySchedule(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ schedule: data });\n    }\n    return code;\n  },\n  queryActivityGuest: async (payload) => {\n    const res = await service.queryActivityGuest(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guest: data });\n    }\n    return code;\n  },\n  queryActivityPartner: async (payload) => {\n    const res = await service.queryActivityPartner(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ partner: data });\n    }\n    return code;\n  },\n  queryActivityGuide: async (payload) => {\n    const res = await service.queryActivityGuide(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guide: data });\n    }\n    return code;\n  },\n  queryActivityStaticMap: async (payload) => {\n    const res = await service.queryActivityStaticMap(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ staticmap: data });\n    }\n    return code;\n  },\n  queryCommunityTicketList: async (payload) => {\n    const res = await service.queryCommunityTicketList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ ticket: data });\n    }\n    return code;\n  },\n  queryCommunityRelatedActivityList: async (payload) => {\n    const res = await service.queryCommunityRelatedActivityList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ othersActivity: data });\n    }\n    return code;\n  },\n}));\n```',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: 'b4def02f-b331-4a92-9db0-85bcdb17c564',
    chat: {
      title: 'MobX重构AppStore',
      systemRole:
        "你是一名前端专家，擅长 react 生态的开发，特别精通 zustand、dva 等多种状态管理工具。\n\n用户接下来会输入一段 dva 的状态管理代码，你需要将这些代码改写为 zustand 的代码。zustand 的代码示例如下：\n\n```ts\n\ninterface DSListState {\n  loading: boolean;\n  searchKeywords?: string;\n  dsList: Data[];\n}\ninterface DSListAction {\n  useFetchList: () => {\n    data: Data[];\n    loading: boolean;\n    mutate: any;\n  };\n  refetch: () => void;\n}\ntype DSListStore = DSListState & DSListAction;\n\nexport const useDSList = create<DSListStore>((set, get) => ({\n  loading: false,\n  searchKeywords: undefined,\n  dsList: [],\n  useFetchList: () => {\n    const { isValidating, mutate } = useSWR<HituDesignSystem[]>(\n      '/ds-list',\n      undefined,\n      {\n        onSuccess: async (data) => {\n          let dsmManagerRoles = [];\n          if (!isPublic) {\n            dsmManagerRoles = await request('/user-manager');\n          }\n\n          set({\n            dsList: data\n              .filter(\n                (item) => item.latestVersion || dsmManagerRoles.includes(item.id),\n              )\n\n            loading: false,\n          });\n        },\n        onError: () => {\n          set({ loading: false });\n        },\n        onLoadingSlow: () => {\n          set({ loading: true });\n        },\n      },\n    );\n\n    return { loading: isValidating || get().loading, mutate, data: get().dsList };\n  },\n  refetch: () => {\n    mutateSWR('/remote/ds-list');\n  },\n}));\n\n```",
      messages: [
        {
          role: 'user',
          content:
            "```js\n  export default {\n    namespace: 'activityPage',\n    state: {\n      basic: {},\n      schedule: {},\n      guide: [],\n      guest: [],\n      partner: [],\n      staticmap: {},\n      ticket: [],\n      othersActivity: []\n    },\n    effects: {\n      *queryActivityBasic({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasic, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivityBasicResearch({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasicResearch, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivitySchedule({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivitySchedule, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              schedule: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuest({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuest, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guest: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityPartner({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityPartner, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              partner: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuide({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuide, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guide: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityStaticMap({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityStaticMap, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              staticmap: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityTicketList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityTicketList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              ticket: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityRelatedActivityList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityRelatedActivityList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              othersActivity: data\n            }\n          });\n        }\n        return code;\n      }\n    },\n    reducers: {\n      updateState: (state, { payload }) => ({ ...state, ...payload })\n    }\n  };\n  ```",
        },
        {
          role: 'assistant',
          content:
            '以下是改写后的 zustand 代码：\n\n```ts\ninterface ActivityPageState {\n  basic: any;\n  schedule: any;\n  guide: any[];\n  guest: any[];\n  partner: any[];\n  staticmap: any;\n  ticket: any[];\n  othersActivity: any[];\n}\n\ninterface ActivityPageActions {\n  queryActivityBasic: (payload: any) => Promise<any>;\n  queryActivityBasicResearch: (payload: any) => Promise<any>;\n  queryActivitySchedule: (payload: any) => Promise<any>;\n  queryActivityGuest: (payload: any) => Promise<any>;\n  queryActivityPartner: (payload: any) => Promise<any>;\n  queryActivityGuide: (payload: any) => Promise<any>;\n  queryActivityStaticMap: (payload: any) => Promise<any>;\n  queryCommunityTicketList: (payload: any) => Promise<any>;\n  queryCommunityRelatedActivityList: (payload: any) => Promise<any>;\n}\n\ntype ActivityPageStore = ActivityPageState & ActivityPageActions;\n\nexport const useActivityPage = create<ActivityPageStore>((set, get) => ({\n  basic: {},\n  schedule: {},\n  guide: [],\n  guest: [],\n  partner: [],\n  staticmap: {},\n  ticket: [],\n  othersActivity: [],\n  queryActivityBasic: async (payload) => {\n    const res = await service.queryActivityBasic(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivityBasicResearch: async (payload) => {\n    const res = await service.queryActivityBasicResearch(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivitySchedule: async (payload) => {\n    const res = await service.queryActivitySchedule(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ schedule: data });\n    }\n    return code;\n  },\n  queryActivityGuest: async (payload) => {\n    const res = await service.queryActivityGuest(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guest: data });\n    }\n    return code;\n  },\n  queryActivityPartner: async (payload) => {\n    const res = await service.queryActivityPartner(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ partner: data });\n    }\n    return code;\n  },\n  queryActivityGuide: async (payload) => {\n    const res = await service.queryActivityGuide(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guide: data });\n    }\n    return code;\n  },\n  queryActivityStaticMap: async (payload) => {\n    const res = await service.queryActivityStaticMap(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ staticmap: data });\n    }\n    return code;\n  },\n  queryCommunityTicketList: async (payload) => {\n    const res = await service.queryCommunityTicketList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ ticket: data });\n    }\n    return code;\n  },\n  queryCommunityRelatedActivityList: async (payload) => {\n    const res = await service.queryCommunityRelatedActivityList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ othersActivity: data });\n    }\n    return code;\n  },\n}));\n```',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: '8c828dab-535a-4376-b231-e9f37ccf4ce6',
    chat: {
      title: 'Next.js PWA配置与解决方案',
      systemRole: '',
      messages: [
        {
          role: 'user',
          content:
            '在 nextjs 支持 pwa ，让其可以在Chrome 上显示添加到应用程序。应该如何配置 manifest',
        },
        {
          role: 'assistant',
          content:
            '在 Next.js 中支持 PWA，需要进行以下步骤：\n\n1. 创建一个 manifest.json 文件，该文件需要包含应用程序的名称、图标、主题颜色等信息。例如：\n\n```\n{\n  "name": "My PWA",\n  "short_name": "MyPWA",\n  "icons": [\n    {\n      "src": "/icon-192x192.png",\n      "sizes": "192x192",\n      "type": "image/png"\n    },\n    {\n      "src": "/icon-512x512.png",\n      "sizes": "512x512",\n      "type": "image/png"\n    }\n  ],\n  "theme_color": "#ffffff",\n  "background_color": "#ffffff",\n  "display": "standalone"\n}\n```\n\n2. 在 Next.js 中的 public 目录下创建一个名为 icons 的文件夹，并将应用程序图标添加到该文件夹中。\n\n3. 在 Next.js 的 pages 目录下创建一个名为 _app.js 的文件，并在该文件中添加以下代码：\n\n```\nimport Head from \'next/head\';\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Head>\n        <link rel="manifest" href="/manifest.json" />\n      </Head>\n      <Component {...pageProps} />\n    </>\n  );\n}\n\nexport default MyApp;\n```\n\n此代码将在应用程序中添加 manifest.json 文件，并使其可用于 PWA。\n\n4. 最后，在 Chrome 浏览器中打开应用程序，并单击地址栏右侧的“+”按钮，即可将应用程序添加到主屏幕中。\n\n希望这些步骤能够帮助你成功配置 Next.js 应用程序的 PWA。',
        },
        {
          role: 'user',
          content: '我配置了manifest，但是mac的 chrome 浏览器上没有出现添加到本地的按钮',
        },
        {
          role: 'assistant',
          content:
            '如果你已经按照上面的步骤配置了 manifest.json 文件，并且在 _app.js 文件中添加了链接，但是在 Chrome 浏览器上仍然无法看到添加到本地的按钮，那么你可以尝试以下几个解决方案：\n\n1. 确认你的 Chrome 浏览器是否支持 PWA。在 Chrome 浏览器中输入 chrome://version/，查看 "Service Worker" 和 "Web App Manifest" 是否启用。如果没有启用，你需要在 Chrome 浏览器中启用这两个功能。\n\n2. 确认你的 manifest.json 文件是否符合规范。你可以使用 Lighthouse 工具来检查你的 manifest.json 文件是否符合规范。在 Chrome 浏览器中按下 F12，然后选择 Lighthouse 选项卡，运行 Lighthouse 工具，并选择 "PWA" 选项卡。如果你的 manifest.json 文件存在问题，Lighthouse 会给出相应的错误提示。\n\n3. 确认你的 manifest.json 文件是否正确地链接到了你的应用程序。在 Chrome 浏览器中按下 F12，然后选择 "Application" 选项卡，选择 "Manifest" 选项卡，确认你的 manifest.json 文件是否正确链接到了你的应用程序。如果你的 manifest.json 文件链接错误，你需要在 _app.js 文件中修复链接。\n\n希望这些解决方案能够帮助你解决问题。',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: '5c1177f5-1140-4250-8377-2781a10a4618',
    chat: {
      title: '重构 React 组件为 Hooks',
      systemRole: '你是一名前端专家，擅长讲 React Class组件重构为 React hooks 组件',
      messages: [
        {
          role: 'user',
          content:
            "```ts\nclass TagCloud extends Component<TagCloudProps, TagCloudState> {\n    state = {\n      dv: null,\n      height: 0,\n      width: 0,\n    };\n    isUnmount: boolean = false;\n    requestRef: number = 0;\n    root: HTMLDivElement | undefined = undefined;\n    imageMask: HTMLImageElement | undefined = undefined;\n    componentDidMount() {\n      requestAnimationFrame(() => {\n        this.initTagCloud();\n        this.renderChart(this.props);\n      });\n      window.addEventListener('resize', this.resize, {\n        passive: true,\n      });\n    }\n    componentDidUpdate(preProps?: TagCloudProps) {\n      const { data } = this.props;\n      if (preProps && JSON.stringify(preProps.data) !== JSON.stringify(data)) {\n        this.renderChart(this.props);\n      }\n    }\n    componentWillUnmount() {\n      this.isUnmount = true;\n      window.cancelAnimationFrame(this.requestRef);\n      window.removeEventListener('resize', this.resize);\n    }\n    resize = () => {\n      this.requestRef = requestAnimationFrame(() => {\n        this.renderChart(this.props);\n      });\n    };\n    saveRootRef = (node: HTMLDivElement) => {\n      this.root = node;\n    };\n    initTagCloud = () => {\n      function getTextAttrs(cfg: {\n        x?: any;\n        y?: any;\n        style?: any;\n        opacity?: any;\n        origin?: any;\n        color?: any;\n      }) {\n        return {\n          ...cfg.style,\n          fillOpacity: cfg.opacity,\n          fontSize: cfg.origin._origin.size,\n          rotate: cfg.origin._origin.rotate,\n          text: cfg.origin._origin.text,\n          textAlign: 'center',\n          fontFamily: cfg.origin._origin.font,\n          fill: cfg.color,\n          textBaseline: 'Alphabetic',\n        };\n      }\n      (Shape as any).registerShape('point', 'cloud', {\n        drawShape(\n          cfg: {\n            x: any;\n            y: any;\n          },\n          container: {\n            addShape: (\n              arg0: string,\n              arg1: {\n                attrs: any;\n              },\n            ) => void;\n          },\n        ) {\n          const attrs = getTextAttrs(cfg);\n          return container.addShape('text', {\n            attrs: {\n              ...attrs,\n              x: cfg.x,\n              y: cfg.y,\n            },\n          });\n        },\n      });\n    };\n    renderChart = Debounce((nextProps: TagCloudProps) => {\n      // const colors = ['#1890FF', '#41D9C7', '#2FC25B', '#FACC14', '#9AE65C'];\n      const { data, height } = nextProps || this.props;\n      if (data.length < 1 || !this.root) {\n        return;\n      }\n      const h = height;\n      const w = this.root.offsetWidth;\n      const onload = () => {\n        const dv = new DataSet.View().source(data);\n        const range = dv.range('value');\n        const [min, max] = range;\n        dv.transform({\n          type: 'tag-cloud',\n          fields: ['name', 'value'],\n          imageMask: this.imageMask,\n          font: 'Verdana',\n          size: [w, h],\n          // 宽高设置最好根据 imageMask 做调整\n          padding: 0,\n          timeInterval: 5000,\n          // max execute time\n          rotate() {\n            return 0;\n          },\n          fontSize(d: { value: number }) {\n            const size = ((d.value - min) / (max - min)) ** 2;\n            return size * (17.5 - 5) + 5;\n          },\n        });\n        if (this.isUnmount) {\n          return;\n        }\n        this.setState({\n          dv,\n          width: w,\n          height: h,\n        });\n      };\n      if (!this.imageMask) {\n        this.imageMask = new Image();\n        this.imageMask.crossOrigin = '';\n        this.imageMask.src = imgUrl;\n        this.imageMask.onload = onload;\n      } else {\n        onload();\n      }\n    }, 500);\n    render() {\n      const { className, height } = this.props;\n      const { dv, width, height: stateHeight } = this.state;\n      return (\n        <div\n          className={classNames(styles.tagCloud, className)}\n          style={{\n            width: '100%',\n            height,\n          }}\n          ref={this.saveRootRef}\n        >\n          {dv && (\n            <Chart\n              width={width}\n              height={stateHeight}\n              data={dv}\n              padding={0}\n              scale={{\n                x: {\n                  nice: false,\n                },\n                y: {\n                  nice: false,\n                },\n              }}\n            >\n              <Tooltip showTitle={false} />\n              <Coord reflect=\"y\" />\n              <Geom\n                type=\"point\"\n                position=\"x*y\"\n                color=\"text\"\n                shape=\"cloud\"\n                tooltip={[\n                  'text*value',\n                  function trans(text, value) {\n                    return {\n                      name: text,\n                      value,\n                    };\n                  },\n                ]}\n              />\n            </Chart>\n          )}\n        </div>\n      );\n    }\n  }\n```",
        },
        {
          role: 'assistant',
          content:
            "以下是将该组件重构为 React hooks 组件的代码：\n\n```javascript\nimport React, { useState, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { Chart, Geom, Tooltip, Coord, Shape } from 'bizcharts';\nimport Debounce from 'lodash/debounce';\nimport DataSet from '@antv/data-set';\nimport imgUrl from './mask.png';\nimport styles from './TagCloud.less';\n\ninterface TagCloudProps {\n  className?: string;\n  height: number;\n  data: { name: string; value: number }[];\n}\n\nconst TagCloud: React.FC<TagCloudProps> = ({ className, height, data }) => {\n  const [dv, setDv] = useState<any>(null);\n  const [chartWidth, setChartWidth] = useState<number>(0);\n  const [chartHeight, setChartHeight] = useState<number>(0);\n  const isUnmount = useRef<boolean>(false);\n  const requestRef = useRef<number>(0);\n  const rootRef = useRef<HTMLDivElement>(null);\n  const imageMaskRef = useRef<HTMLImageElement | null>(null);\n\n  const resize = () => {\n    requestRef.current = requestAnimationFrame(() => {\n      renderChart();\n    });\n  };\n\n  const initTagCloud = () => {\n    function getTextAttrs(cfg: {\n      x?: any;\n      y?: any;\n      style?: any;\n      opacity?: any;\n      origin?: any;\n      color?: any;\n    }) {\n      return {\n        ...cfg.style,\n        fillOpacity: cfg.opacity,\n        fontSize: cfg.origin._origin.size,\n        rotate: cfg.origin._origin.rotate,\n        text: cfg.origin._origin.text,\n        textAlign: 'center',\n        fontFamily: cfg.origin._origin.font,\n        fill: cfg.color,\n        textBaseline: 'Alphabetic',\n      };\n    }\n    (Shape as any).registerShape('point', 'cloud', {\n      drawShape(\n        cfg: {\n          x: any;\n          y: any;\n        },\n        container: {\n          addShape: (\n            arg0: string,\n            arg1: {\n              attrs: any;\n            },\n          ) => void;\n        },\n      ) {\n        const attrs = getTextAttrs(cfg);\n        return container.addShape('text', {\n          attrs: {\n            ...attrs,\n            x: cfg.x,\n            y: cfg.y,\n          },\n        });\n      },\n    });\n  };\n\n  const renderChart = Debounce(() => {\n    const root = rootRef.current;\n    const imageMask = imageMaskRef.current;\n\n    if (!root || !imageMask || data.length < 1) {\n      return;\n    }\n\n    const h = height;\n    const w = root.offsetWidth;\n\n    const onload = () => {\n      const dv = new DataSet.View().source(data);\n      const range = dv.range('value');\n      const [min, max] = range;\n      dv.transform({\n        type: 'tag-cloud',\n        fields: ['name', 'value'],\n        imageMask,\n        font: 'Verdana',\n        size: [w, h],\n        // 宽高设置最好根据 imageMask 做调整\n        padding: 0,\n        timeInterval: 5000,\n        // max execute time\n        rotate() {\n          return 0;\n        },\n        fontSize(d: { value: number }) {\n          const size = ((d.value - min) / (max - min)) ** 2;\n          return size * (17.5 - 5) + 5;\n        },\n      });\n\n      if (isUnmount.current) {\n        return;\n      }\n\n      setDv(dv);\n      setChartWidth(w);\n      setChartHeight(h);\n    };\n\n    if (!imageMaskRef.current) {\n      const img = new Image();\n      img.crossOrigin = '';\n      img.src = imgUrl;\n      img.onload = onload;\n      imageMaskRef.current = img;\n    } else {\n      onload();\n    }\n  }, 500);\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(() => {\n      initTagCloud();\n      renderChart();\n    });\n\n    return () => {\n      isUnmount.current = true;\n      window.cancelAnimationFrame(requestRef.current);\n      window.removeEventListener('resize', resize);\n    };\n  }, []);\n\n  useEffect(() => {\n    renderChart();\n  }, [data]);\n\n  return (\n    <div\n      className={classNames(styles.tagCloud, className)}\n      style={{\n        width: '100%',\n        height,\n      }}\n      ref={rootRef}\n    >\n      {dv && (\n        <Chart\n          width={chartWidth}\n          height={chartHeight}\n          data={dv}\n          padding={0}\n          scale={{\n            x: {\n              nice: false,\n            },\n            y: {\n              nice: false,\n            },\n          }}\n        >\n          <Tooltip showTitle={false} />\n          <Coord reflect=\"y\" />\n          <Geom\n            type=\"point\"\n            position=\"x*y\"\n            color=\"text\"\n            shape=\"cloud\"\n            tooltip={[\n              'text*value',\n              function trans(text, value) {\n                return {\n                  name: text,\n                  value,\n                };\n              },\n            ]}\n          />\n        </Chart>\n      )}\n    </div>\n  );\n};\n\nexport default TagCloud;\n```",
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: 'd8b00215-3ed6-4fcf-891b-800b033950d3',
    chat: {
      title: 'Redux 转 Zustand 实现。',
      systemRole:
        "你是一名前端专家，擅长 react 生态的开发，特别精通 zustand、dva 等多种状态管理工具。\n\n用户接下来会输入一段 dva 的状态管理代码，你需要将这些代码改写为 zustand 的代码。zustand 的代码示例如下：\n\n```ts\n\ninterface DSListState {\n  loading: boolean;\n  searchKeywords?: string;\n  dsList: Data[];\n}\ninterface DSListAction {\n  useFetchList: () => {\n    data: Data[];\n    loading: boolean;\n    mutate: any;\n  };\n  refetch: () => void;\n}\ntype DSListStore = DSListState & DSListAction;\n\nexport const useDSList = create<DSListStore>((set, get) => ({\n  loading: false,\n  searchKeywords: undefined,\n  dsList: [],\n  useFetchList: () => {\n    const { isValidating, mutate } = useSWR<HituDesignSystem[]>(\n      '/ds-list',\n      undefined,\n      {\n        onSuccess: async (data) => {\n          let dsmManagerRoles = [];\n          if (!isPublic) {\n            dsmManagerRoles = await request('/user-manager');\n          }\n\n          set({\n            dsList: data\n              .filter(\n                (item) => item.latestVersion || dsmManagerRoles.includes(item.id),\n              )\n\n            loading: false,\n          });\n        },\n        onError: () => {\n          set({ loading: false });\n        },\n        onLoadingSlow: () => {\n          set({ loading: true });\n        },\n      },\n    );\n\n    return { loading: isValidating || get().loading, mutate, data: get().dsList };\n  },\n  refetch: () => {\n    mutateSWR('/remote/ds-list');\n  },\n}));\n\n```",
      messages: [
        {
          role: 'user',
          content:
            "```js\n  export default {\n    namespace: 'activityPage',\n    state: {\n      basic: {},\n      schedule: {},\n      guide: [],\n      guest: [],\n      partner: [],\n      staticmap: {},\n      ticket: [],\n      othersActivity: []\n    },\n    effects: {\n      *queryActivityBasic({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasic, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivityBasicResearch({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasicResearch, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivitySchedule({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivitySchedule, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              schedule: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuest({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuest, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guest: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityPartner({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityPartner, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              partner: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuide({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuide, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guide: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityStaticMap({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityStaticMap, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              staticmap: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityTicketList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityTicketList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              ticket: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityRelatedActivityList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityRelatedActivityList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              othersActivity: data\n            }\n          });\n        }\n        return code;\n      }\n    },\n    reducers: {\n      updateState: (state, { payload }) => ({ ...state, ...payload })\n    }\n  };\n  ```",
        },
        {
          role: 'assistant',
          content:
            '以下是改写后的 zustand 代码：\n\n```ts\ninterface ActivityPageState {\n  basic: any;\n  schedule: any;\n  guide: any[];\n  guest: any[];\n  partner: any[];\n  staticmap: any;\n  ticket: any[];\n  othersActivity: any[];\n}\n\ninterface ActivityPageActions {\n  queryActivityBasic: (payload: any) => Promise<any>;\n  queryActivityBasicResearch: (payload: any) => Promise<any>;\n  queryActivitySchedule: (payload: any) => Promise<any>;\n  queryActivityGuest: (payload: any) => Promise<any>;\n  queryActivityPartner: (payload: any) => Promise<any>;\n  queryActivityGuide: (payload: any) => Promise<any>;\n  queryActivityStaticMap: (payload: any) => Promise<any>;\n  queryCommunityTicketList: (payload: any) => Promise<any>;\n  queryCommunityRelatedActivityList: (payload: any) => Promise<any>;\n}\n\ntype ActivityPageStore = ActivityPageState & ActivityPageActions;\n\nexport const useActivityPage = create<ActivityPageStore>((set, get) => ({\n  basic: {},\n  schedule: {},\n  guide: [],\n  guest: [],\n  partner: [],\n  staticmap: {},\n  ticket: [],\n  othersActivity: [],\n  queryActivityBasic: async (payload) => {\n    const res = await service.queryActivityBasic(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivityBasicResearch: async (payload) => {\n    const res = await service.queryActivityBasicResearch(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivitySchedule: async (payload) => {\n    const res = await service.queryActivitySchedule(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ schedule: data });\n    }\n    return code;\n  },\n  queryActivityGuest: async (payload) => {\n    const res = await service.queryActivityGuest(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guest: data });\n    }\n    return code;\n  },\n  queryActivityPartner: async (payload) => {\n    const res = await service.queryActivityPartner(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ partner: data });\n    }\n    return code;\n  },\n  queryActivityGuide: async (payload) => {\n    const res = await service.queryActivityGuide(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guide: data });\n    }\n    return code;\n  },\n  queryActivityStaticMap: async (payload) => {\n    const res = await service.queryActivityStaticMap(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ staticmap: data });\n    }\n    return code;\n  },\n  queryCommunityTicketList: async (payload) => {\n    const res = await service.queryCommunityTicketList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ ticket: data });\n    }\n    return code;\n  },\n  queryCommunityRelatedActivityList: async (payload) => {\n    const res = await service.queryCommunityRelatedActivityList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ othersActivity: data });\n    }\n    return code;\n  },\n}));\n```',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: 'b4def02f-b331-4a92-9db0-85bcdb17c564',
    chat: {
      title: 'MobX重构AppStore',
      systemRole:
        "你是一名前端专家，擅长 react 生态的开发，特别精通 zustand、dva 等多种状态管理工具。\n\n用户接下来会输入一段 dva 的状态管理代码，你需要将这些代码改写为 zustand 的代码。zustand 的代码示例如下：\n\n```ts\n\ninterface DSListState {\n  loading: boolean;\n  searchKeywords?: string;\n  dsList: Data[];\n}\ninterface DSListAction {\n  useFetchList: () => {\n    data: Data[];\n    loading: boolean;\n    mutate: any;\n  };\n  refetch: () => void;\n}\ntype DSListStore = DSListState & DSListAction;\n\nexport const useDSList = create<DSListStore>((set, get) => ({\n  loading: false,\n  searchKeywords: undefined,\n  dsList: [],\n  useFetchList: () => {\n    const { isValidating, mutate } = useSWR<HituDesignSystem[]>(\n      '/ds-list',\n      undefined,\n      {\n        onSuccess: async (data) => {\n          let dsmManagerRoles = [];\n          if (!isPublic) {\n            dsmManagerRoles = await request('/user-manager');\n          }\n\n          set({\n            dsList: data\n              .filter(\n                (item) => item.latestVersion || dsmManagerRoles.includes(item.id),\n              )\n\n            loading: false,\n          });\n        },\n        onError: () => {\n          set({ loading: false });\n        },\n        onLoadingSlow: () => {\n          set({ loading: true });\n        },\n      },\n    );\n\n    return { loading: isValidating || get().loading, mutate, data: get().dsList };\n  },\n  refetch: () => {\n    mutateSWR('/remote/ds-list');\n  },\n}));\n\n```",
      messages: [
        {
          role: 'user',
          content:
            "```js\n  export default {\n    namespace: 'activityPage',\n    state: {\n      basic: {},\n      schedule: {},\n      guide: [],\n      guest: [],\n      partner: [],\n      staticmap: {},\n      ticket: [],\n      othersActivity: []\n    },\n    effects: {\n      *queryActivityBasic({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasic, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivityBasicResearch({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasicResearch, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivitySchedule({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivitySchedule, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              schedule: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuest({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuest, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guest: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityPartner({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityPartner, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              partner: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuide({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuide, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guide: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityStaticMap({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityStaticMap, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              staticmap: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityTicketList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityTicketList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              ticket: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityRelatedActivityList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityRelatedActivityList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              othersActivity: data\n            }\n          });\n        }\n        return code;\n      }\n    },\n    reducers: {\n      updateState: (state, { payload }) => ({ ...state, ...payload })\n    }\n  };\n  ```",
        },
        {
          role: 'assistant',
          content:
            '以下是改写后的 zustand 代码：\n\n```ts\ninterface ActivityPageState {\n  basic: any;\n  schedule: any;\n  guide: any[];\n  guest: any[];\n  partner: any[];\n  staticmap: any;\n  ticket: any[];\n  othersActivity: any[];\n}\n\ninterface ActivityPageActions {\n  queryActivityBasic: (payload: any) => Promise<any>;\n  queryActivityBasicResearch: (payload: any) => Promise<any>;\n  queryActivitySchedule: (payload: any) => Promise<any>;\n  queryActivityGuest: (payload: any) => Promise<any>;\n  queryActivityPartner: (payload: any) => Promise<any>;\n  queryActivityGuide: (payload: any) => Promise<any>;\n  queryActivityStaticMap: (payload: any) => Promise<any>;\n  queryCommunityTicketList: (payload: any) => Promise<any>;\n  queryCommunityRelatedActivityList: (payload: any) => Promise<any>;\n}\n\ntype ActivityPageStore = ActivityPageState & ActivityPageActions;\n\nexport const useActivityPage = create<ActivityPageStore>((set, get) => ({\n  basic: {},\n  schedule: {},\n  guide: [],\n  guest: [],\n  partner: [],\n  staticmap: {},\n  ticket: [],\n  othersActivity: [],\n  queryActivityBasic: async (payload) => {\n    const res = await service.queryActivityBasic(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivityBasicResearch: async (payload) => {\n    const res = await service.queryActivityBasicResearch(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivitySchedule: async (payload) => {\n    const res = await service.queryActivitySchedule(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ schedule: data });\n    }\n    return code;\n  },\n  queryActivityGuest: async (payload) => {\n    const res = await service.queryActivityGuest(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guest: data });\n    }\n    return code;\n  },\n  queryActivityPartner: async (payload) => {\n    const res = await service.queryActivityPartner(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ partner: data });\n    }\n    return code;\n  },\n  queryActivityGuide: async (payload) => {\n    const res = await service.queryActivityGuide(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guide: data });\n    }\n    return code;\n  },\n  queryActivityStaticMap: async (payload) => {\n    const res = await service.queryActivityStaticMap(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ staticmap: data });\n    }\n    return code;\n  },\n  queryCommunityTicketList: async (payload) => {\n    const res = await service.queryCommunityTicketList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ ticket: data });\n    }\n    return code;\n  },\n  queryCommunityRelatedActivityList: async (payload) => {\n    const res = await service.queryCommunityRelatedActivityList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ othersActivity: data });\n    }\n    return code;\n  },\n}));\n```',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: '8c828dab-535a-4376-b231-e9f37ccf4ce6',
    chat: {
      title: 'Next.js PWA配置与解决方案',
      systemRole: '',
      messages: [
        {
          role: 'user',
          content:
            '在 nextjs 支持 pwa ，让其可以在Chrome 上显示添加到应用程序。应该如何配置 manifest',
        },
        {
          role: 'assistant',
          content:
            '在 Next.js 中支持 PWA，需要进行以下步骤：\n\n1. 创建一个 manifest.json 文件，该文件需要包含应用程序的名称、图标、主题颜色等信息。例如：\n\n```\n{\n  "name": "My PWA",\n  "short_name": "MyPWA",\n  "icons": [\n    {\n      "src": "/icon-192x192.png",\n      "sizes": "192x192",\n      "type": "image/png"\n    },\n    {\n      "src": "/icon-512x512.png",\n      "sizes": "512x512",\n      "type": "image/png"\n    }\n  ],\n  "theme_color": "#ffffff",\n  "background_color": "#ffffff",\n  "display": "standalone"\n}\n```\n\n2. 在 Next.js 中的 public 目录下创建一个名为 icons 的文件夹，并将应用程序图标添加到该文件夹中。\n\n3. 在 Next.js 的 pages 目录下创建一个名为 _app.js 的文件，并在该文件中添加以下代码：\n\n```\nimport Head from \'next/head\';\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Head>\n        <link rel="manifest" href="/manifest.json" />\n      </Head>\n      <Component {...pageProps} />\n    </>\n  );\n}\n\nexport default MyApp;\n```\n\n此代码将在应用程序中添加 manifest.json 文件，并使其可用于 PWA。\n\n4. 最后，在 Chrome 浏览器中打开应用程序，并单击地址栏右侧的“+”按钮，即可将应用程序添加到主屏幕中。\n\n希望这些步骤能够帮助你成功配置 Next.js 应用程序的 PWA。',
        },
        {
          role: 'user',
          content: '我配置了manifest，但是mac的 chrome 浏览器上没有出现添加到本地的按钮',
        },
        {
          role: 'assistant',
          content:
            '如果你已经按照上面的步骤配置了 manifest.json 文件，并且在 _app.js 文件中添加了链接，但是在 Chrome 浏览器上仍然无法看到添加到本地的按钮，那么你可以尝试以下几个解决方案：\n\n1. 确认你的 Chrome 浏览器是否支持 PWA。在 Chrome 浏览器中输入 chrome://version/，查看 "Service Worker" 和 "Web App Manifest" 是否启用。如果没有启用，你需要在 Chrome 浏览器中启用这两个功能。\n\n2. 确认你的 manifest.json 文件是否符合规范。你可以使用 Lighthouse 工具来检查你的 manifest.json 文件是否符合规范。在 Chrome 浏览器中按下 F12，然后选择 Lighthouse 选项卡，运行 Lighthouse 工具，并选择 "PWA" 选项卡。如果你的 manifest.json 文件存在问题，Lighthouse 会给出相应的错误提示。\n\n3. 确认你的 manifest.json 文件是否正确地链接到了你的应用程序。在 Chrome 浏览器中按下 F12，然后选择 "Application" 选项卡，选择 "Manifest" 选项卡，确认你的 manifest.json 文件是否正确链接到了你的应用程序。如果你的 manifest.json 文件链接错误，你需要在 _app.js 文件中修复链接。\n\n希望这些解决方案能够帮助你解决问题。',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: '5c1177f5-1140-4250-8377-2781a10a4618',
    chat: {
      title: '重构 React 组件为 Hooks',
      systemRole: '你是一名前端专家，擅长讲 React Class组件重构为 React hooks 组件',
      messages: [
        {
          role: 'user',
          content:
            "```ts\nclass TagCloud extends Component<TagCloudProps, TagCloudState> {\n    state = {\n      dv: null,\n      height: 0,\n      width: 0,\n    };\n    isUnmount: boolean = false;\n    requestRef: number = 0;\n    root: HTMLDivElement | undefined = undefined;\n    imageMask: HTMLImageElement | undefined = undefined;\n    componentDidMount() {\n      requestAnimationFrame(() => {\n        this.initTagCloud();\n        this.renderChart(this.props);\n      });\n      window.addEventListener('resize', this.resize, {\n        passive: true,\n      });\n    }\n    componentDidUpdate(preProps?: TagCloudProps) {\n      const { data } = this.props;\n      if (preProps && JSON.stringify(preProps.data) !== JSON.stringify(data)) {\n        this.renderChart(this.props);\n      }\n    }\n    componentWillUnmount() {\n      this.isUnmount = true;\n      window.cancelAnimationFrame(this.requestRef);\n      window.removeEventListener('resize', this.resize);\n    }\n    resize = () => {\n      this.requestRef = requestAnimationFrame(() => {\n        this.renderChart(this.props);\n      });\n    };\n    saveRootRef = (node: HTMLDivElement) => {\n      this.root = node;\n    };\n    initTagCloud = () => {\n      function getTextAttrs(cfg: {\n        x?: any;\n        y?: any;\n        style?: any;\n        opacity?: any;\n        origin?: any;\n        color?: any;\n      }) {\n        return {\n          ...cfg.style,\n          fillOpacity: cfg.opacity,\n          fontSize: cfg.origin._origin.size,\n          rotate: cfg.origin._origin.rotate,\n          text: cfg.origin._origin.text,\n          textAlign: 'center',\n          fontFamily: cfg.origin._origin.font,\n          fill: cfg.color,\n          textBaseline: 'Alphabetic',\n        };\n      }\n      (Shape as any).registerShape('point', 'cloud', {\n        drawShape(\n          cfg: {\n            x: any;\n            y: any;\n          },\n          container: {\n            addShape: (\n              arg0: string,\n              arg1: {\n                attrs: any;\n              },\n            ) => void;\n          },\n        ) {\n          const attrs = getTextAttrs(cfg);\n          return container.addShape('text', {\n            attrs: {\n              ...attrs,\n              x: cfg.x,\n              y: cfg.y,\n            },\n          });\n        },\n      });\n    };\n    renderChart = Debounce((nextProps: TagCloudProps) => {\n      // const colors = ['#1890FF', '#41D9C7', '#2FC25B', '#FACC14', '#9AE65C'];\n      const { data, height } = nextProps || this.props;\n      if (data.length < 1 || !this.root) {\n        return;\n      }\n      const h = height;\n      const w = this.root.offsetWidth;\n      const onload = () => {\n        const dv = new DataSet.View().source(data);\n        const range = dv.range('value');\n        const [min, max] = range;\n        dv.transform({\n          type: 'tag-cloud',\n          fields: ['name', 'value'],\n          imageMask: this.imageMask,\n          font: 'Verdana',\n          size: [w, h],\n          // 宽高设置最好根据 imageMask 做调整\n          padding: 0,\n          timeInterval: 5000,\n          // max execute time\n          rotate() {\n            return 0;\n          },\n          fontSize(d: { value: number }) {\n            const size = ((d.value - min) / (max - min)) ** 2;\n            return size * (17.5 - 5) + 5;\n          },\n        });\n        if (this.isUnmount) {\n          return;\n        }\n        this.setState({\n          dv,\n          width: w,\n          height: h,\n        });\n      };\n      if (!this.imageMask) {\n        this.imageMask = new Image();\n        this.imageMask.crossOrigin = '';\n        this.imageMask.src = imgUrl;\n        this.imageMask.onload = onload;\n      } else {\n        onload();\n      }\n    }, 500);\n    render() {\n      const { className, height } = this.props;\n      const { dv, width, height: stateHeight } = this.state;\n      return (\n        <div\n          className={classNames(styles.tagCloud, className)}\n          style={{\n            width: '100%',\n            height,\n          }}\n          ref={this.saveRootRef}\n        >\n          {dv && (\n            <Chart\n              width={width}\n              height={stateHeight}\n              data={dv}\n              padding={0}\n              scale={{\n                x: {\n                  nice: false,\n                },\n                y: {\n                  nice: false,\n                },\n              }}\n            >\n              <Tooltip showTitle={false} />\n              <Coord reflect=\"y\" />\n              <Geom\n                type=\"point\"\n                position=\"x*y\"\n                color=\"text\"\n                shape=\"cloud\"\n                tooltip={[\n                  'text*value',\n                  function trans(text, value) {\n                    return {\n                      name: text,\n                      value,\n                    };\n                  },\n                ]}\n              />\n            </Chart>\n          )}\n        </div>\n      );\n    }\n  }\n```",
        },
        {
          role: 'assistant',
          content:
            "以下是将该组件重构为 React hooks 组件的代码：\n\n```javascript\nimport React, { useState, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { Chart, Geom, Tooltip, Coord, Shape } from 'bizcharts';\nimport Debounce from 'lodash/debounce';\nimport DataSet from '@antv/data-set';\nimport imgUrl from './mask.png';\nimport styles from './TagCloud.less';\n\ninterface TagCloudProps {\n  className?: string;\n  height: number;\n  data: { name: string; value: number }[];\n}\n\nconst TagCloud: React.FC<TagCloudProps> = ({ className, height, data }) => {\n  const [dv, setDv] = useState<any>(null);\n  const [chartWidth, setChartWidth] = useState<number>(0);\n  const [chartHeight, setChartHeight] = useState<number>(0);\n  const isUnmount = useRef<boolean>(false);\n  const requestRef = useRef<number>(0);\n  const rootRef = useRef<HTMLDivElement>(null);\n  const imageMaskRef = useRef<HTMLImageElement | null>(null);\n\n  const resize = () => {\n    requestRef.current = requestAnimationFrame(() => {\n      renderChart();\n    });\n  };\n\n  const initTagCloud = () => {\n    function getTextAttrs(cfg: {\n      x?: any;\n      y?: any;\n      style?: any;\n      opacity?: any;\n      origin?: any;\n      color?: any;\n    }) {\n      return {\n        ...cfg.style,\n        fillOpacity: cfg.opacity,\n        fontSize: cfg.origin._origin.size,\n        rotate: cfg.origin._origin.rotate,\n        text: cfg.origin._origin.text,\n        textAlign: 'center',\n        fontFamily: cfg.origin._origin.font,\n        fill: cfg.color,\n        textBaseline: 'Alphabetic',\n      };\n    }\n    (Shape as any).registerShape('point', 'cloud', {\n      drawShape(\n        cfg: {\n          x: any;\n          y: any;\n        },\n        container: {\n          addShape: (\n            arg0: string,\n            arg1: {\n              attrs: any;\n            },\n          ) => void;\n        },\n      ) {\n        const attrs = getTextAttrs(cfg);\n        return container.addShape('text', {\n          attrs: {\n            ...attrs,\n            x: cfg.x,\n            y: cfg.y,\n          },\n        });\n      },\n    });\n  };\n\n  const renderChart = Debounce(() => {\n    const root = rootRef.current;\n    const imageMask = imageMaskRef.current;\n\n    if (!root || !imageMask || data.length < 1) {\n      return;\n    }\n\n    const h = height;\n    const w = root.offsetWidth;\n\n    const onload = () => {\n      const dv = new DataSet.View().source(data);\n      const range = dv.range('value');\n      const [min, max] = range;\n      dv.transform({\n        type: 'tag-cloud',\n        fields: ['name', 'value'],\n        imageMask,\n        font: 'Verdana',\n        size: [w, h],\n        // 宽高设置最好根据 imageMask 做调整\n        padding: 0,\n        timeInterval: 5000,\n        // max execute time\n        rotate() {\n          return 0;\n        },\n        fontSize(d: { value: number }) {\n          const size = ((d.value - min) / (max - min)) ** 2;\n          return size * (17.5 - 5) + 5;\n        },\n      });\n\n      if (isUnmount.current) {\n        return;\n      }\n\n      setDv(dv);\n      setChartWidth(w);\n      setChartHeight(h);\n    };\n\n    if (!imageMaskRef.current) {\n      const img = new Image();\n      img.crossOrigin = '';\n      img.src = imgUrl;\n      img.onload = onload;\n      imageMaskRef.current = img;\n    } else {\n      onload();\n    }\n  }, 500);\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(() => {\n      initTagCloud();\n      renderChart();\n    });\n\n    return () => {\n      isUnmount.current = true;\n      window.cancelAnimationFrame(requestRef.current);\n      window.removeEventListener('resize', resize);\n    };\n  }, []);\n\n  useEffect(() => {\n    renderChart();\n  }, [data]);\n\n  return (\n    <div\n      className={classNames(styles.tagCloud, className)}\n      style={{\n        width: '100%',\n        height,\n      }}\n      ref={rootRef}\n    >\n      {dv && (\n        <Chart\n          width={chartWidth}\n          height={chartHeight}\n          data={dv}\n          padding={0}\n          scale={{\n            x: {\n              nice: false,\n            },\n            y: {\n              nice: false,\n            },\n          }}\n        >\n          <Tooltip showTitle={false} />\n          <Coord reflect=\"y\" />\n          <Geom\n            type=\"point\"\n            position=\"x*y\"\n            color=\"text\"\n            shape=\"cloud\"\n            tooltip={[\n              'text*value',\n              function trans(text, value) {\n                return {\n                  name: text,\n                  value,\n                };\n              },\n            ]}\n          />\n        </Chart>\n      )}\n    </div>\n  );\n};\n\nexport default TagCloud;\n```",
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: 'd8b00215-3ed6-4fcf-891b-800b033950d3',
    chat: {
      title: 'Redux 转 Zustand 实现。',
      systemRole:
        "你是一名前端专家，擅长 react 生态的开发，特别精通 zustand、dva 等多种状态管理工具。\n\n用户接下来会输入一段 dva 的状态管理代码，你需要将这些代码改写为 zustand 的代码。zustand 的代码示例如下：\n\n```ts\n\ninterface DSListState {\n  loading: boolean;\n  searchKeywords?: string;\n  dsList: Data[];\n}\ninterface DSListAction {\n  useFetchList: () => {\n    data: Data[];\n    loading: boolean;\n    mutate: any;\n  };\n  refetch: () => void;\n}\ntype DSListStore = DSListState & DSListAction;\n\nexport const useDSList = create<DSListStore>((set, get) => ({\n  loading: false,\n  searchKeywords: undefined,\n  dsList: [],\n  useFetchList: () => {\n    const { isValidating, mutate } = useSWR<HituDesignSystem[]>(\n      '/ds-list',\n      undefined,\n      {\n        onSuccess: async (data) => {\n          let dsmManagerRoles = [];\n          if (!isPublic) {\n            dsmManagerRoles = await request('/user-manager');\n          }\n\n          set({\n            dsList: data\n              .filter(\n                (item) => item.latestVersion || dsmManagerRoles.includes(item.id),\n              )\n\n            loading: false,\n          });\n        },\n        onError: () => {\n          set({ loading: false });\n        },\n        onLoadingSlow: () => {\n          set({ loading: true });\n        },\n      },\n    );\n\n    return { loading: isValidating || get().loading, mutate, data: get().dsList };\n  },\n  refetch: () => {\n    mutateSWR('/remote/ds-list');\n  },\n}));\n\n```",
      messages: [
        {
          role: 'user',
          content:
            "```js\n  export default {\n    namespace: 'activityPage',\n    state: {\n      basic: {},\n      schedule: {},\n      guide: [],\n      guest: [],\n      partner: [],\n      staticmap: {},\n      ticket: [],\n      othersActivity: []\n    },\n    effects: {\n      *queryActivityBasic({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasic, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivityBasicResearch({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasicResearch, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivitySchedule({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivitySchedule, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              schedule: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuest({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuest, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guest: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityPartner({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityPartner, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              partner: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuide({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuide, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guide: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityStaticMap({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityStaticMap, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              staticmap: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityTicketList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityTicketList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              ticket: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityRelatedActivityList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityRelatedActivityList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              othersActivity: data\n            }\n          });\n        }\n        return code;\n      }\n    },\n    reducers: {\n      updateState: (state, { payload }) => ({ ...state, ...payload })\n    }\n  };\n  ```",
        },
        {
          role: 'assistant',
          content:
            '以下是改写后的 zustand 代码：\n\n```ts\ninterface ActivityPageState {\n  basic: any;\n  schedule: any;\n  guide: any[];\n  guest: any[];\n  partner: any[];\n  staticmap: any;\n  ticket: any[];\n  othersActivity: any[];\n}\n\ninterface ActivityPageActions {\n  queryActivityBasic: (payload: any) => Promise<any>;\n  queryActivityBasicResearch: (payload: any) => Promise<any>;\n  queryActivitySchedule: (payload: any) => Promise<any>;\n  queryActivityGuest: (payload: any) => Promise<any>;\n  queryActivityPartner: (payload: any) => Promise<any>;\n  queryActivityGuide: (payload: any) => Promise<any>;\n  queryActivityStaticMap: (payload: any) => Promise<any>;\n  queryCommunityTicketList: (payload: any) => Promise<any>;\n  queryCommunityRelatedActivityList: (payload: any) => Promise<any>;\n}\n\ntype ActivityPageStore = ActivityPageState & ActivityPageActions;\n\nexport const useActivityPage = create<ActivityPageStore>((set, get) => ({\n  basic: {},\n  schedule: {},\n  guide: [],\n  guest: [],\n  partner: [],\n  staticmap: {},\n  ticket: [],\n  othersActivity: [],\n  queryActivityBasic: async (payload) => {\n    const res = await service.queryActivityBasic(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivityBasicResearch: async (payload) => {\n    const res = await service.queryActivityBasicResearch(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivitySchedule: async (payload) => {\n    const res = await service.queryActivitySchedule(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ schedule: data });\n    }\n    return code;\n  },\n  queryActivityGuest: async (payload) => {\n    const res = await service.queryActivityGuest(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guest: data });\n    }\n    return code;\n  },\n  queryActivityPartner: async (payload) => {\n    const res = await service.queryActivityPartner(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ partner: data });\n    }\n    return code;\n  },\n  queryActivityGuide: async (payload) => {\n    const res = await service.queryActivityGuide(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guide: data });\n    }\n    return code;\n  },\n  queryActivityStaticMap: async (payload) => {\n    const res = await service.queryActivityStaticMap(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ staticmap: data });\n    }\n    return code;\n  },\n  queryCommunityTicketList: async (payload) => {\n    const res = await service.queryCommunityTicketList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ ticket: data });\n    }\n    return code;\n  },\n  queryCommunityRelatedActivityList: async (payload) => {\n    const res = await service.queryCommunityRelatedActivityList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ othersActivity: data });\n    }\n    return code;\n  },\n}));\n```',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: 'b4def02f-b331-4a92-9db0-85bcdb17c564',
    chat: {
      title: 'MobX重构AppStore',
      systemRole:
        "你是一名前端专家，擅长 react 生态的开发，特别精通 zustand、dva 等多种状态管理工具。\n\n用户接下来会输入一段 dva 的状态管理代码，你需要将这些代码改写为 zustand 的代码。zustand 的代码示例如下：\n\n```ts\n\ninterface DSListState {\n  loading: boolean;\n  searchKeywords?: string;\n  dsList: Data[];\n}\ninterface DSListAction {\n  useFetchList: () => {\n    data: Data[];\n    loading: boolean;\n    mutate: any;\n  };\n  refetch: () => void;\n}\ntype DSListStore = DSListState & DSListAction;\n\nexport const useDSList = create<DSListStore>((set, get) => ({\n  loading: false,\n  searchKeywords: undefined,\n  dsList: [],\n  useFetchList: () => {\n    const { isValidating, mutate } = useSWR<HituDesignSystem[]>(\n      '/ds-list',\n      undefined,\n      {\n        onSuccess: async (data) => {\n          let dsmManagerRoles = [];\n          if (!isPublic) {\n            dsmManagerRoles = await request('/user-manager');\n          }\n\n          set({\n            dsList: data\n              .filter(\n                (item) => item.latestVersion || dsmManagerRoles.includes(item.id),\n              )\n\n            loading: false,\n          });\n        },\n        onError: () => {\n          set({ loading: false });\n        },\n        onLoadingSlow: () => {\n          set({ loading: true });\n        },\n      },\n    );\n\n    return { loading: isValidating || get().loading, mutate, data: get().dsList };\n  },\n  refetch: () => {\n    mutateSWR('/remote/ds-list');\n  },\n}));\n\n```",
      messages: [
        {
          role: 'user',
          content:
            "```js\n  export default {\n    namespace: 'activityPage',\n    state: {\n      basic: {},\n      schedule: {},\n      guide: [],\n      guest: [],\n      partner: [],\n      staticmap: {},\n      ticket: [],\n      othersActivity: []\n    },\n    effects: {\n      *queryActivityBasic({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasic, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivityBasicResearch({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasicResearch, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivitySchedule({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivitySchedule, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              schedule: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuest({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuest, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guest: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityPartner({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityPartner, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              partner: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuide({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuide, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guide: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityStaticMap({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityStaticMap, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              staticmap: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityTicketList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityTicketList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              ticket: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityRelatedActivityList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityRelatedActivityList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              othersActivity: data\n            }\n          });\n        }\n        return code;\n      }\n    },\n    reducers: {\n      updateState: (state, { payload }) => ({ ...state, ...payload })\n    }\n  };\n  ```",
        },
        {
          role: 'assistant',
          content:
            '以下是改写后的 zustand 代码：\n\n```ts\ninterface ActivityPageState {\n  basic: any;\n  schedule: any;\n  guide: any[];\n  guest: any[];\n  partner: any[];\n  staticmap: any;\n  ticket: any[];\n  othersActivity: any[];\n}\n\ninterface ActivityPageActions {\n  queryActivityBasic: (payload: any) => Promise<any>;\n  queryActivityBasicResearch: (payload: any) => Promise<any>;\n  queryActivitySchedule: (payload: any) => Promise<any>;\n  queryActivityGuest: (payload: any) => Promise<any>;\n  queryActivityPartner: (payload: any) => Promise<any>;\n  queryActivityGuide: (payload: any) => Promise<any>;\n  queryActivityStaticMap: (payload: any) => Promise<any>;\n  queryCommunityTicketList: (payload: any) => Promise<any>;\n  queryCommunityRelatedActivityList: (payload: any) => Promise<any>;\n}\n\ntype ActivityPageStore = ActivityPageState & ActivityPageActions;\n\nexport const useActivityPage = create<ActivityPageStore>((set, get) => ({\n  basic: {},\n  schedule: {},\n  guide: [],\n  guest: [],\n  partner: [],\n  staticmap: {},\n  ticket: [],\n  othersActivity: [],\n  queryActivityBasic: async (payload) => {\n    const res = await service.queryActivityBasic(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivityBasicResearch: async (payload) => {\n    const res = await service.queryActivityBasicResearch(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivitySchedule: async (payload) => {\n    const res = await service.queryActivitySchedule(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ schedule: data });\n    }\n    return code;\n  },\n  queryActivityGuest: async (payload) => {\n    const res = await service.queryActivityGuest(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guest: data });\n    }\n    return code;\n  },\n  queryActivityPartner: async (payload) => {\n    const res = await service.queryActivityPartner(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ partner: data });\n    }\n    return code;\n  },\n  queryActivityGuide: async (payload) => {\n    const res = await service.queryActivityGuide(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guide: data });\n    }\n    return code;\n  },\n  queryActivityStaticMap: async (payload) => {\n    const res = await service.queryActivityStaticMap(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ staticmap: data });\n    }\n    return code;\n  },\n  queryCommunityTicketList: async (payload) => {\n    const res = await service.queryCommunityTicketList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ ticket: data });\n    }\n    return code;\n  },\n  queryCommunityRelatedActivityList: async (payload) => {\n    const res = await service.queryCommunityRelatedActivityList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ othersActivity: data });\n    }\n    return code;\n  },\n}));\n```',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: '8c828dab-535a-4376-b231-e9f37ccf4ce6',
    chat: {
      title: 'Next.js PWA配置与解决方案',
      systemRole: '',
      messages: [
        {
          role: 'user',
          content:
            '在 nextjs 支持 pwa ，让其可以在Chrome 上显示添加到应用程序。应该如何配置 manifest',
        },
        {
          role: 'assistant',
          content:
            '在 Next.js 中支持 PWA，需要进行以下步骤：\n\n1. 创建一个 manifest.json 文件，该文件需要包含应用程序的名称、图标、主题颜色等信息。例如：\n\n```\n{\n  "name": "My PWA",\n  "short_name": "MyPWA",\n  "icons": [\n    {\n      "src": "/icon-192x192.png",\n      "sizes": "192x192",\n      "type": "image/png"\n    },\n    {\n      "src": "/icon-512x512.png",\n      "sizes": "512x512",\n      "type": "image/png"\n    }\n  ],\n  "theme_color": "#ffffff",\n  "background_color": "#ffffff",\n  "display": "standalone"\n}\n```\n\n2. 在 Next.js 中的 public 目录下创建一个名为 icons 的文件夹，并将应用程序图标添加到该文件夹中。\n\n3. 在 Next.js 的 pages 目录下创建一个名为 _app.js 的文件，并在该文件中添加以下代码：\n\n```\nimport Head from \'next/head\';\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Head>\n        <link rel="manifest" href="/manifest.json" />\n      </Head>\n      <Component {...pageProps} />\n    </>\n  );\n}\n\nexport default MyApp;\n```\n\n此代码将在应用程序中添加 manifest.json 文件，并使其可用于 PWA。\n\n4. 最后，在 Chrome 浏览器中打开应用程序，并单击地址栏右侧的“+”按钮，即可将应用程序添加到主屏幕中。\n\n希望这些步骤能够帮助你成功配置 Next.js 应用程序的 PWA。',
        },
        {
          role: 'user',
          content: '我配置了manifest，但是mac的 chrome 浏览器上没有出现添加到本地的按钮',
        },
        {
          role: 'assistant',
          content:
            '如果你已经按照上面的步骤配置了 manifest.json 文件，并且在 _app.js 文件中添加了链接，但是在 Chrome 浏览器上仍然无法看到添加到本地的按钮，那么你可以尝试以下几个解决方案：\n\n1. 确认你的 Chrome 浏览器是否支持 PWA。在 Chrome 浏览器中输入 chrome://version/，查看 "Service Worker" 和 "Web App Manifest" 是否启用。如果没有启用，你需要在 Chrome 浏览器中启用这两个功能。\n\n2. 确认你的 manifest.json 文件是否符合规范。你可以使用 Lighthouse 工具来检查你的 manifest.json 文件是否符合规范。在 Chrome 浏览器中按下 F12，然后选择 Lighthouse 选项卡，运行 Lighthouse 工具，并选择 "PWA" 选项卡。如果你的 manifest.json 文件存在问题，Lighthouse 会给出相应的错误提示。\n\n3. 确认你的 manifest.json 文件是否正确地链接到了你的应用程序。在 Chrome 浏览器中按下 F12，然后选择 "Application" 选项卡，选择 "Manifest" 选项卡，确认你的 manifest.json 文件是否正确链接到了你的应用程序。如果你的 manifest.json 文件链接错误，你需要在 _app.js 文件中修复链接。\n\n希望这些解决方案能够帮助你解决问题。',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: '5c1177f5-1140-4250-8377-2781a10a4618',
    chat: {
      title: '重构 React 组件为 Hooks',
      systemRole: '你是一名前端专家，擅长讲 React Class组件重构为 React hooks 组件',
      messages: [
        {
          role: 'user',
          content:
            "```ts\nclass TagCloud extends Component<TagCloudProps, TagCloudState> {\n    state = {\n      dv: null,\n      height: 0,\n      width: 0,\n    };\n    isUnmount: boolean = false;\n    requestRef: number = 0;\n    root: HTMLDivElement | undefined = undefined;\n    imageMask: HTMLImageElement | undefined = undefined;\n    componentDidMount() {\n      requestAnimationFrame(() => {\n        this.initTagCloud();\n        this.renderChart(this.props);\n      });\n      window.addEventListener('resize', this.resize, {\n        passive: true,\n      });\n    }\n    componentDidUpdate(preProps?: TagCloudProps) {\n      const { data } = this.props;\n      if (preProps && JSON.stringify(preProps.data) !== JSON.stringify(data)) {\n        this.renderChart(this.props);\n      }\n    }\n    componentWillUnmount() {\n      this.isUnmount = true;\n      window.cancelAnimationFrame(this.requestRef);\n      window.removeEventListener('resize', this.resize);\n    }\n    resize = () => {\n      this.requestRef = requestAnimationFrame(() => {\n        this.renderChart(this.props);\n      });\n    };\n    saveRootRef = (node: HTMLDivElement) => {\n      this.root = node;\n    };\n    initTagCloud = () => {\n      function getTextAttrs(cfg: {\n        x?: any;\n        y?: any;\n        style?: any;\n        opacity?: any;\n        origin?: any;\n        color?: any;\n      }) {\n        return {\n          ...cfg.style,\n          fillOpacity: cfg.opacity,\n          fontSize: cfg.origin._origin.size,\n          rotate: cfg.origin._origin.rotate,\n          text: cfg.origin._origin.text,\n          textAlign: 'center',\n          fontFamily: cfg.origin._origin.font,\n          fill: cfg.color,\n          textBaseline: 'Alphabetic',\n        };\n      }\n      (Shape as any).registerShape('point', 'cloud', {\n        drawShape(\n          cfg: {\n            x: any;\n            y: any;\n          },\n          container: {\n            addShape: (\n              arg0: string,\n              arg1: {\n                attrs: any;\n              },\n            ) => void;\n          },\n        ) {\n          const attrs = getTextAttrs(cfg);\n          return container.addShape('text', {\n            attrs: {\n              ...attrs,\n              x: cfg.x,\n              y: cfg.y,\n            },\n          });\n        },\n      });\n    };\n    renderChart = Debounce((nextProps: TagCloudProps) => {\n      // const colors = ['#1890FF', '#41D9C7', '#2FC25B', '#FACC14', '#9AE65C'];\n      const { data, height } = nextProps || this.props;\n      if (data.length < 1 || !this.root) {\n        return;\n      }\n      const h = height;\n      const w = this.root.offsetWidth;\n      const onload = () => {\n        const dv = new DataSet.View().source(data);\n        const range = dv.range('value');\n        const [min, max] = range;\n        dv.transform({\n          type: 'tag-cloud',\n          fields: ['name', 'value'],\n          imageMask: this.imageMask,\n          font: 'Verdana',\n          size: [w, h],\n          // 宽高设置最好根据 imageMask 做调整\n          padding: 0,\n          timeInterval: 5000,\n          // max execute time\n          rotate() {\n            return 0;\n          },\n          fontSize(d: { value: number }) {\n            const size = ((d.value - min) / (max - min)) ** 2;\n            return size * (17.5 - 5) + 5;\n          },\n        });\n        if (this.isUnmount) {\n          return;\n        }\n        this.setState({\n          dv,\n          width: w,\n          height: h,\n        });\n      };\n      if (!this.imageMask) {\n        this.imageMask = new Image();\n        this.imageMask.crossOrigin = '';\n        this.imageMask.src = imgUrl;\n        this.imageMask.onload = onload;\n      } else {\n        onload();\n      }\n    }, 500);\n    render() {\n      const { className, height } = this.props;\n      const { dv, width, height: stateHeight } = this.state;\n      return (\n        <div\n          className={classNames(styles.tagCloud, className)}\n          style={{\n            width: '100%',\n            height,\n          }}\n          ref={this.saveRootRef}\n        >\n          {dv && (\n            <Chart\n              width={width}\n              height={stateHeight}\n              data={dv}\n              padding={0}\n              scale={{\n                x: {\n                  nice: false,\n                },\n                y: {\n                  nice: false,\n                },\n              }}\n            >\n              <Tooltip showTitle={false} />\n              <Coord reflect=\"y\" />\n              <Geom\n                type=\"point\"\n                position=\"x*y\"\n                color=\"text\"\n                shape=\"cloud\"\n                tooltip={[\n                  'text*value',\n                  function trans(text, value) {\n                    return {\n                      name: text,\n                      value,\n                    };\n                  },\n                ]}\n              />\n            </Chart>\n          )}\n        </div>\n      );\n    }\n  }\n```",
        },
        {
          role: 'assistant',
          content:
            "以下是将该组件重构为 React hooks 组件的代码：\n\n```javascript\nimport React, { useState, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { Chart, Geom, Tooltip, Coord, Shape } from 'bizcharts';\nimport Debounce from 'lodash/debounce';\nimport DataSet from '@antv/data-set';\nimport imgUrl from './mask.png';\nimport styles from './TagCloud.less';\n\ninterface TagCloudProps {\n  className?: string;\n  height: number;\n  data: { name: string; value: number }[];\n}\n\nconst TagCloud: React.FC<TagCloudProps> = ({ className, height, data }) => {\n  const [dv, setDv] = useState<any>(null);\n  const [chartWidth, setChartWidth] = useState<number>(0);\n  const [chartHeight, setChartHeight] = useState<number>(0);\n  const isUnmount = useRef<boolean>(false);\n  const requestRef = useRef<number>(0);\n  const rootRef = useRef<HTMLDivElement>(null);\n  const imageMaskRef = useRef<HTMLImageElement | null>(null);\n\n  const resize = () => {\n    requestRef.current = requestAnimationFrame(() => {\n      renderChart();\n    });\n  };\n\n  const initTagCloud = () => {\n    function getTextAttrs(cfg: {\n      x?: any;\n      y?: any;\n      style?: any;\n      opacity?: any;\n      origin?: any;\n      color?: any;\n    }) {\n      return {\n        ...cfg.style,\n        fillOpacity: cfg.opacity,\n        fontSize: cfg.origin._origin.size,\n        rotate: cfg.origin._origin.rotate,\n        text: cfg.origin._origin.text,\n        textAlign: 'center',\n        fontFamily: cfg.origin._origin.font,\n        fill: cfg.color,\n        textBaseline: 'Alphabetic',\n      };\n    }\n    (Shape as any).registerShape('point', 'cloud', {\n      drawShape(\n        cfg: {\n          x: any;\n          y: any;\n        },\n        container: {\n          addShape: (\n            arg0: string,\n            arg1: {\n              attrs: any;\n            },\n          ) => void;\n        },\n      ) {\n        const attrs = getTextAttrs(cfg);\n        return container.addShape('text', {\n          attrs: {\n            ...attrs,\n            x: cfg.x,\n            y: cfg.y,\n          },\n        });\n      },\n    });\n  };\n\n  const renderChart = Debounce(() => {\n    const root = rootRef.current;\n    const imageMask = imageMaskRef.current;\n\n    if (!root || !imageMask || data.length < 1) {\n      return;\n    }\n\n    const h = height;\n    const w = root.offsetWidth;\n\n    const onload = () => {\n      const dv = new DataSet.View().source(data);\n      const range = dv.range('value');\n      const [min, max] = range;\n      dv.transform({\n        type: 'tag-cloud',\n        fields: ['name', 'value'],\n        imageMask,\n        font: 'Verdana',\n        size: [w, h],\n        // 宽高设置最好根据 imageMask 做调整\n        padding: 0,\n        timeInterval: 5000,\n        // max execute time\n        rotate() {\n          return 0;\n        },\n        fontSize(d: { value: number }) {\n          const size = ((d.value - min) / (max - min)) ** 2;\n          return size * (17.5 - 5) + 5;\n        },\n      });\n\n      if (isUnmount.current) {\n        return;\n      }\n\n      setDv(dv);\n      setChartWidth(w);\n      setChartHeight(h);\n    };\n\n    if (!imageMaskRef.current) {\n      const img = new Image();\n      img.crossOrigin = '';\n      img.src = imgUrl;\n      img.onload = onload;\n      imageMaskRef.current = img;\n    } else {\n      onload();\n    }\n  }, 500);\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(() => {\n      initTagCloud();\n      renderChart();\n    });\n\n    return () => {\n      isUnmount.current = true;\n      window.cancelAnimationFrame(requestRef.current);\n      window.removeEventListener('resize', resize);\n    };\n  }, []);\n\n  useEffect(() => {\n    renderChart();\n  }, [data]);\n\n  return (\n    <div\n      className={classNames(styles.tagCloud, className)}\n      style={{\n        width: '100%',\n        height,\n      }}\n      ref={rootRef}\n    >\n      {dv && (\n        <Chart\n          width={chartWidth}\n          height={chartHeight}\n          data={dv}\n          padding={0}\n          scale={{\n            x: {\n              nice: false,\n            },\n            y: {\n              nice: false,\n            },\n          }}\n        >\n          <Tooltip showTitle={false} />\n          <Coord reflect=\"y\" />\n          <Geom\n            type=\"point\"\n            position=\"x*y\"\n            color=\"text\"\n            shape=\"cloud\"\n            tooltip={[\n              'text*value',\n              function trans(text, value) {\n                return {\n                  name: text,\n                  value,\n                };\n              },\n            ]}\n          />\n        </Chart>\n      )}\n    </div>\n  );\n};\n\nexport default TagCloud;\n```",
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: 'd8b00215-3ed6-4fcf-891b-800b033950d3',
    chat: {
      title: 'Redux 转 Zustand 实现。',
      systemRole:
        "你是一名前端专家，擅长 react 生态的开发，特别精通 zustand、dva 等多种状态管理工具。\n\n用户接下来会输入一段 dva 的状态管理代码，你需要将这些代码改写为 zustand 的代码。zustand 的代码示例如下：\n\n```ts\n\ninterface DSListState {\n  loading: boolean;\n  searchKeywords?: string;\n  dsList: Data[];\n}\ninterface DSListAction {\n  useFetchList: () => {\n    data: Data[];\n    loading: boolean;\n    mutate: any;\n  };\n  refetch: () => void;\n}\ntype DSListStore = DSListState & DSListAction;\n\nexport const useDSList = create<DSListStore>((set, get) => ({\n  loading: false,\n  searchKeywords: undefined,\n  dsList: [],\n  useFetchList: () => {\n    const { isValidating, mutate } = useSWR<HituDesignSystem[]>(\n      '/ds-list',\n      undefined,\n      {\n        onSuccess: async (data) => {\n          let dsmManagerRoles = [];\n          if (!isPublic) {\n            dsmManagerRoles = await request('/user-manager');\n          }\n\n          set({\n            dsList: data\n              .filter(\n                (item) => item.latestVersion || dsmManagerRoles.includes(item.id),\n              )\n\n            loading: false,\n          });\n        },\n        onError: () => {\n          set({ loading: false });\n        },\n        onLoadingSlow: () => {\n          set({ loading: true });\n        },\n      },\n    );\n\n    return { loading: isValidating || get().loading, mutate, data: get().dsList };\n  },\n  refetch: () => {\n    mutateSWR('/remote/ds-list');\n  },\n}));\n\n```",
      messages: [
        {
          role: 'user',
          content:
            "```js\n  export default {\n    namespace: 'activityPage',\n    state: {\n      basic: {},\n      schedule: {},\n      guide: [],\n      guest: [],\n      partner: [],\n      staticmap: {},\n      ticket: [],\n      othersActivity: []\n    },\n    effects: {\n      *queryActivityBasic({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasic, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivityBasicResearch({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasicResearch, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivitySchedule({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivitySchedule, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              schedule: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuest({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuest, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guest: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityPartner({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityPartner, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              partner: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuide({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuide, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guide: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityStaticMap({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityStaticMap, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              staticmap: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityTicketList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityTicketList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              ticket: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityRelatedActivityList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityRelatedActivityList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              othersActivity: data\n            }\n          });\n        }\n        return code;\n      }\n    },\n    reducers: {\n      updateState: (state, { payload }) => ({ ...state, ...payload })\n    }\n  };\n  ```",
        },
        {
          role: 'assistant',
          content:
            '以下是改写后的 zustand 代码：\n\n```ts\ninterface ActivityPageState {\n  basic: any;\n  schedule: any;\n  guide: any[];\n  guest: any[];\n  partner: any[];\n  staticmap: any;\n  ticket: any[];\n  othersActivity: any[];\n}\n\ninterface ActivityPageActions {\n  queryActivityBasic: (payload: any) => Promise<any>;\n  queryActivityBasicResearch: (payload: any) => Promise<any>;\n  queryActivitySchedule: (payload: any) => Promise<any>;\n  queryActivityGuest: (payload: any) => Promise<any>;\n  queryActivityPartner: (payload: any) => Promise<any>;\n  queryActivityGuide: (payload: any) => Promise<any>;\n  queryActivityStaticMap: (payload: any) => Promise<any>;\n  queryCommunityTicketList: (payload: any) => Promise<any>;\n  queryCommunityRelatedActivityList: (payload: any) => Promise<any>;\n}\n\ntype ActivityPageStore = ActivityPageState & ActivityPageActions;\n\nexport const useActivityPage = create<ActivityPageStore>((set, get) => ({\n  basic: {},\n  schedule: {},\n  guide: [],\n  guest: [],\n  partner: [],\n  staticmap: {},\n  ticket: [],\n  othersActivity: [],\n  queryActivityBasic: async (payload) => {\n    const res = await service.queryActivityBasic(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivityBasicResearch: async (payload) => {\n    const res = await service.queryActivityBasicResearch(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivitySchedule: async (payload) => {\n    const res = await service.queryActivitySchedule(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ schedule: data });\n    }\n    return code;\n  },\n  queryActivityGuest: async (payload) => {\n    const res = await service.queryActivityGuest(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guest: data });\n    }\n    return code;\n  },\n  queryActivityPartner: async (payload) => {\n    const res = await service.queryActivityPartner(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ partner: data });\n    }\n    return code;\n  },\n  queryActivityGuide: async (payload) => {\n    const res = await service.queryActivityGuide(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guide: data });\n    }\n    return code;\n  },\n  queryActivityStaticMap: async (payload) => {\n    const res = await service.queryActivityStaticMap(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ staticmap: data });\n    }\n    return code;\n  },\n  queryCommunityTicketList: async (payload) => {\n    const res = await service.queryCommunityTicketList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ ticket: data });\n    }\n    return code;\n  },\n  queryCommunityRelatedActivityList: async (payload) => {\n    const res = await service.queryCommunityRelatedActivityList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ othersActivity: data });\n    }\n    return code;\n  },\n}));\n```',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
  {
    id: 'b4def02f-b331-4a92-9db0-85bcdb17c564',
    chat: {
      title: 'MobX重构AppStore',
      systemRole:
        "你是一名前端专家，擅长 react 生态的开发，特别精通 zustand、dva 等多种状态管理工具。\n\n用户接下来会输入一段 dva 的状态管理代码，你需要将这些代码改写为 zustand 的代码。zustand 的代码示例如下：\n\n```ts\n\ninterface DSListState {\n  loading: boolean;\n  searchKeywords?: string;\n  dsList: Data[];\n}\ninterface DSListAction {\n  useFetchList: () => {\n    data: Data[];\n    loading: boolean;\n    mutate: any;\n  };\n  refetch: () => void;\n}\ntype DSListStore = DSListState & DSListAction;\n\nexport const useDSList = create<DSListStore>((set, get) => ({\n  loading: false,\n  searchKeywords: undefined,\n  dsList: [],\n  useFetchList: () => {\n    const { isValidating, mutate } = useSWR<HituDesignSystem[]>(\n      '/ds-list',\n      undefined,\n      {\n        onSuccess: async (data) => {\n          let dsmManagerRoles = [];\n          if (!isPublic) {\n            dsmManagerRoles = await request('/user-manager');\n          }\n\n          set({\n            dsList: data\n              .filter(\n                (item) => item.latestVersion || dsmManagerRoles.includes(item.id),\n              )\n\n            loading: false,\n          });\n        },\n        onError: () => {\n          set({ loading: false });\n        },\n        onLoadingSlow: () => {\n          set({ loading: true });\n        },\n      },\n    );\n\n    return { loading: isValidating || get().loading, mutate, data: get().dsList };\n  },\n  refetch: () => {\n    mutateSWR('/remote/ds-list');\n  },\n}));\n\n```",
      messages: [
        {
          role: 'user',
          content:
            "```js\n  export default {\n    namespace: 'activityPage',\n    state: {\n      basic: {},\n      schedule: {},\n      guide: [],\n      guest: [],\n      partner: [],\n      staticmap: {},\n      ticket: [],\n      othersActivity: []\n    },\n    effects: {\n      *queryActivityBasic({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasic, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivityBasicResearch({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityBasicResearch, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              basic: data\n            }\n          });\n        }\n        return data;\n      },\n      *queryActivitySchedule({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivitySchedule, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              schedule: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuest({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuest, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guest: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityPartner({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityPartner, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              partner: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityGuide({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityGuide, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              guide: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryActivityStaticMap({ payload }, { call, put, select }) {\n        const res = yield call(service.queryActivityStaticMap, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              staticmap: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityTicketList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityTicketList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              ticket: data\n            }\n          });\n        }\n        return code;\n      },\n      *queryCommunityRelatedActivityList({ payload }, { call, put, select }) {\n        const res = yield call(service.queryCommunityRelatedActivityList, payload);\n        const { code, data } = res;\n        if (code === 200) {\n          yield put({\n            type: 'updateState',\n            payload: {\n              othersActivity: data\n            }\n          });\n        }\n        return code;\n      }\n    },\n    reducers: {\n      updateState: (state, { payload }) => ({ ...state, ...payload })\n    }\n  };\n  ```",
        },
        {
          role: 'assistant',
          content:
            '以下是改写后的 zustand 代码：\n\n```ts\ninterface ActivityPageState {\n  basic: any;\n  schedule: any;\n  guide: any[];\n  guest: any[];\n  partner: any[];\n  staticmap: any;\n  ticket: any[];\n  othersActivity: any[];\n}\n\ninterface ActivityPageActions {\n  queryActivityBasic: (payload: any) => Promise<any>;\n  queryActivityBasicResearch: (payload: any) => Promise<any>;\n  queryActivitySchedule: (payload: any) => Promise<any>;\n  queryActivityGuest: (payload: any) => Promise<any>;\n  queryActivityPartner: (payload: any) => Promise<any>;\n  queryActivityGuide: (payload: any) => Promise<any>;\n  queryActivityStaticMap: (payload: any) => Promise<any>;\n  queryCommunityTicketList: (payload: any) => Promise<any>;\n  queryCommunityRelatedActivityList: (payload: any) => Promise<any>;\n}\n\ntype ActivityPageStore = ActivityPageState & ActivityPageActions;\n\nexport const useActivityPage = create<ActivityPageStore>((set, get) => ({\n  basic: {},\n  schedule: {},\n  guide: [],\n  guest: [],\n  partner: [],\n  staticmap: {},\n  ticket: [],\n  othersActivity: [],\n  queryActivityBasic: async (payload) => {\n    const res = await service.queryActivityBasic(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivityBasicResearch: async (payload) => {\n    const res = await service.queryActivityBasicResearch(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ basic: data });\n    }\n    return data;\n  },\n  queryActivitySchedule: async (payload) => {\n    const res = await service.queryActivitySchedule(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ schedule: data });\n    }\n    return code;\n  },\n  queryActivityGuest: async (payload) => {\n    const res = await service.queryActivityGuest(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guest: data });\n    }\n    return code;\n  },\n  queryActivityPartner: async (payload) => {\n    const res = await service.queryActivityPartner(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ partner: data });\n    }\n    return code;\n  },\n  queryActivityGuide: async (payload) => {\n    const res = await service.queryActivityGuide(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ guide: data });\n    }\n    return code;\n  },\n  queryActivityStaticMap: async (payload) => {\n    const res = await service.queryActivityStaticMap(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ staticmap: data });\n    }\n    return code;\n  },\n  queryCommunityTicketList: async (payload) => {\n    const res = await service.queryCommunityTicketList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ ticket: data });\n    }\n    return code;\n  },\n  queryCommunityRelatedActivityList: async (payload) => {\n    const res = await service.queryCommunityRelatedActivityList(payload);\n    const { code, data } = res;\n    if (code === 200) {\n      set({ othersActivity: data });\n    }\n    return code;\n  },\n}));\n```',
        },
      ],
      model: 'gpt-3.5-turbo',
    },
  },
];
